{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pyspectrum","text":"<p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f API</p>"},{"location":"#_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>\u0427\u0442\u0435\u043d\u0438\u0435 \u0441\u043f\u0435\u043a\u0442\u0440\u0430 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0444\u0430\u0439\u043b \u041f\u0438\u0440\u043e\u043c\u0435\u0442\u0440 \u0425\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438 \u043b\u0430\u043c\u043f </p>"},{"location":"installation/","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438","text":""},{"location":"installation/#linux","title":"Linux","text":"<p>(\u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u044b \u0434\u043b\u044f Ubuntu 22.04 LTS)  </p> <ol> <li>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c python \u0438 pip (\u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f - 3.10) <code>sudo apt install python3 python3-pip libxcb-xinerama0</code> <code>libxcb-xinerama0</code> \u043d\u0443\u0436\u043d\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0434\u0435\u043c\u043e \u043d\u0430 Ubuntu  </li> <li>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 <code>pip install vmk-spectrum</code></li> <li>\u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0440\u0430\u0432\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a USB \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0443 (\u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u043d\u0435 \u0438\u0437-\u043f\u043e\u0434 root'\u0430) <code>echo 'SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"0403\", ATTRS{idProduct}==\"6014\",  MODE=\"0666\"' | sudo tee /etc/udev/rules.d/69-spectrometer.rules    sudo udevadm control --reload</code></li> </ol>"},{"location":"installation/#windows","title":"Windows","text":"<ol> <li>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0434\u0440\u0430\u0439\u0432\u0435\u0440 FTDI (\u0415\u0441\u043b\u0438 \u043d\u0430 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0435 \u0440\u0430\u043d\u0435\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u043b <code>Atom</code>, \u0448\u0430\u0433 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u0442\u044c)</li> <li>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0420\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u044f\u0435\u043c\u044b\u0439 \u043f\u0430\u043a\u0435\u0442 Visual C++ \u0434\u043b\u044f Visual Studio 2015</li> <li>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c 64-\u0431\u0438\u0442\u043d\u044b\u0439 Python (\u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f - 3.10)  </li> <li>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 <code>pip install vmk-spectrum</code> </li> </ol>"},{"location":"reference/","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f API","text":""},{"location":"reference/#spectrometer","title":"Spectrometer","text":"<p>\u041a\u043b\u0430\u0441\u0441, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u0443\u044e \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044e \u043d\u0430\u0434 \u0441\u043f\u0435\u043a\u0442\u0440\u043e\u043c\u0435\u0442\u0440\u043e\u043c</p>"},{"location":"reference/#pyspectrum.spectrometer.Spectrometer.__init__","title":"<code>__init__(device_id, factory_config=FactoryConfig.default(), reopen=True)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>device_id</code> <code>DeviceID</code> <p>\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430. \u0412 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f UsbID, EthernetID</p> required <code>factory_config</code> <code>FactoryConfig</code> <p>\u0417\u0430\u0432\u043e\u0434\u0441\u043a\u0438\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438</p> <code>FactoryConfig.default()</code>"},{"location":"reference/#pyspectrum.spectrometer.Spectrometer.close","title":"<code>close()</code>","text":"<p>\u0417\u0430\u043a\u0440\u044b\u0442\u044c \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e</p>"},{"location":"reference/#pyspectrum.spectrometer.Spectrometer.dark_signal","title":"<code>dark_signal: Data | None</code>  <code>property</code>","text":"<p>\u0422\u0435\u043a\u0443\u0449\u0438\u0439 \u0442\u0435\u043c\u043d\u043e\u0432\u043e\u0439 \u0441\u0438\u0433\u043d\u0430\u043b</p>"},{"location":"reference/#pyspectrum.spectrometer.Spectrometer.read_dark_signal","title":"<code>read_dark_signal(n_times=None)</code>","text":"<p>\u0421\u0447\u0438\u0442\u0430\u0442\u044c \u0442\u0435\u043c\u043d\u043e\u0432\u043e\u0439 \u0441\u0438\u0433\u043d\u0430\u043b</p> <p>Parameters:</p> Name Type Description Default <code>n_times</code> <code>Optional[int]</code> <p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439. \u041f\u0440\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043e \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435</p> <code>None</code>"},{"location":"reference/#pyspectrum.spectrometer.Spectrometer.save_dark_signal","title":"<code>save_dark_signal()</code>","text":"<p>\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0442\u0435\u043c\u043d\u043e\u0432\u043e\u0439 \u0441\u0438\u0433\u043d\u0430\u043b</p>"},{"location":"reference/#pyspectrum.spectrometer.Spectrometer.read_raw","title":"<code>read_raw(n_times=None)</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u044b\u0440\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430</p> <p>Returns:</p> Type Description <code>Data</code> <p>\u0421\u044b\u0440\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0441 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430</p>"},{"location":"reference/#pyspectrum.spectrometer.Spectrometer.read","title":"<code>read(force=False)</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0435\u043a\u0442\u0440 \u0441 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430</p> <p>Parameters:</p> Name Type Description Default <code>force</code> <code>bool</code> <p>\u0415\u0441\u043b\u0438 <code>True</code>, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0438\u0433\u043d\u0430\u043b \u0431\u0435\u0437 \u043a\u0430\u043b\u0438\u0431\u0440\u043e\u0432\u043a\u0438 \u043f\u043e \u0434\u043b\u0438\u043d\u0430 \u0432\u043e\u043b\u043d</p> <code>False</code> <p>Returns:</p> Type Description <code>Spectrum</code> <p>\u0421\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0435\u043a\u0442\u0440</p>"},{"location":"reference/#pyspectrum.spectrometer.Spectrometer.is_configured","title":"<code>is_configured: bool</code>  <code>property</code>","text":"<p>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 <code>True</code>, \u0435\u0441\u043b\u0438 \u0441\u043f\u0435\u043a\u0442\u0440\u043e\u043c\u0435\u0442\u0440 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445</p>"},{"location":"reference/#pyspectrum.spectrometer.Spectrometer.set_config","title":"<code>set_config(exposure=None, n_times=None, dark_signal_path=None, wavelength_calibration_path=None)</code>","text":"<p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0441\u043f\u0435\u043a\u0442\u0440\u043e\u043c\u0435\u0442\u0440\u0430. \u0412\u0441\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b, \u043f\u0440\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f.</p> <p>Parameters:</p> Name Type Description Default <code>exposure</code> <code>Optional[int]</code> <p>\u0412\u0440\u0435\u043c\u044f \u044d\u043a\u0441\u043f\u043e\u0437\u0438\u0446\u0438\u0438 (\u0432 \u043c\u0441). \u041f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u0442\u0435\u043c\u043d\u043e\u0432\u043e\u0439 \u0441\u0438\u0433\u043d\u0430\u043b \u0431\u0443\u0434\u0435\u0442 \u0441\u0431\u0440\u043e\u0448\u0435\u043d.</p> <code>None</code> <code>n_times</code> <code>Optional[int]</code> <p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439</p> <code>None</code> <code>dark_signal_path</code> <code>Optional[str]</code> <p>\u041f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443 \u0442\u0435\u043c\u043d\u043e\u0432\u043e\u0433\u043e \u0441\u0438\u0433\u043d\u0430\u043b\u0430. \u0415\u0441\u043b\u0438 \u0444\u0430\u0439\u043b \u0442\u0435\u043c\u043d\u043e\u0432\u043e\u0433\u043e \u0441\u0438\u0433\u043d\u0430\u043b\u0430 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0438 \u0432\u0430\u043b\u0438\u0434\u0435\u043d, \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d.</p> <code>None</code> <code>wavelength_calibration_path</code> <code>Optional[str]</code> <p>\u041f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u0430\u043b\u0438\u0431\u0440\u043e\u0432\u043a\u0438 \u043f\u043e \u0434\u043b\u0438\u043d\u0435 \u0432\u043e\u043b\u043d\u044b</p> <code>None</code>"},{"location":"reference/#factoryconfig","title":"FactoryConfig","text":"<p>\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438, \u0438\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0430\u0434\u044c\u043d\u044b\u0435 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430</p>"},{"location":"reference/#pyspectrum.spectrometer.FactoryConfig.load","title":"<code>load(path)</code>  <code>staticmethod</code>","text":"<p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>\u041f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443 \u0437\u0430\u0432\u043e\u0434\u0441\u043a\u0438\u0445 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a</p> required <p>Returns:</p> Type Description <code>FactoryConfig</code> <p>\u041e\u0431\u044a\u0435\u043a\u0442 \u0437\u0430\u0432\u043e\u0434\u0441\u043a\u0438\u0445 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a</p>"},{"location":"reference/#pyspectrum.spectrometer.FactoryConfig.default","title":"<code>default()</code>  <code>staticmethod</code>","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u0437\u0430\u0432\u043e\u0434\u0441\u043a\u0438\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f</p> <p>Returns:</p> Type Description <code>FactoryConfig</code> <p>\u041e\u0431\u044a\u0435\u043a\u0442 \u0437\u0430\u0432\u043e\u0434\u0441\u043a\u0438\u0445 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a</p>"},{"location":"reference/#data","title":"Data","text":"<p>\u0421\u044b\u0440\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0441\u043e \u0441\u043f\u0435\u043a\u0442\u0440\u043e\u043c\u0435\u0442\u0440\u0430</p>"},{"location":"reference/#pyspectrum.data.Data.intensity","title":"<code>intensity: NDArray[float]</code>  <code>instance-attribute</code>","text":"<p>\u0414\u0432\u0443\u043c\u0435\u0440\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f. \u041f\u0435\u0440\u0432\u044b\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 - \u043d\u043e\u043c\u0435\u0440 \u043a\u0430\u0434\u0440\u0430, \u0432\u0442\u043e\u0440\u043e\u0439 - \u043d\u043e\u043c\u0435\u0440 \u0441\u044d\u043c\u043f\u043b\u0430 \u0432 \u043a\u0430\u0434\u0440\u0435</p>"},{"location":"reference/#pyspectrum.data.Data.clipped","title":"<code>clipped: NDArray[bool]</code>  <code>instance-attribute</code>","text":"<p>\u041c\u0430\u0441\u0441\u0438\u0432 boolean \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439. \u0415\u0441\u043b\u0438 <code>clipped[i,j]==True</code>, <code>intensity[i,j]</code> \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0437\u0430\u0448\u043a\u0430\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435</p>"},{"location":"reference/#pyspectrum.data.Data.exposure","title":"<code>exposure: int</code>  <code>instance-attribute</code>","text":"<p>\u042d\u043a\u0441\u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0432 \u043c\u0438\u043b\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445</p>"},{"location":"reference/#pyspectrum.data.Data.n_times","title":"<code>n_times: int</code>  <code>property</code>","text":"<p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439</p>"},{"location":"reference/#pyspectrum.data.Data.n_numbers","title":"<code>n_numbers: int</code>  <code>property</code>","text":"<p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0441\u0447\u0435\u0442\u043e\u0432</p>"},{"location":"reference/#pyspectrum.data.Data.shape","title":"<code>shape: tuple[int, int]</code>  <code>property</code>","text":"<p>\u0420\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u044b\u043d\u0445</p>"},{"location":"reference/#pyspectrum.data.Data.save","title":"<code>save(path)</code>","text":"<p>\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u0432 \u0444\u0430\u0439\u043b</p>"},{"location":"reference/#pyspectrum.data.Data.load","title":"<code>load(path)</code>  <code>classmethod</code>","text":"<p>\u041f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430</p>"},{"location":"reference/#spectrum","title":"Spectrum","text":"<p>         Bases: <code>Data</code></p> <p>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0441\u043e \u0441\u043f\u0435\u043a\u0442\u0440\u043e\u043c\u0435\u0442\u0440\u0430. \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u043b\u0438\u043d\u0430\u0445 \u0432\u043e\u043b\u043d \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f. \u0412 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0432\u044b\u0447\u0438\u0442\u0430\u043d\u0438\u0438 \u0442\u0435\u043c\u043d\u043e\u0432\u043e\u0433\u043e \u0441\u0438\u0433\u043d\u0430\u043b\u0430.</p>"},{"location":"reference/#pyspectrum.data.Spectrum.wavelength","title":"<code>wavelength: NDArray[float]</code>  <code>instance-attribute</code>","text":"<p>\u0434\u043b\u0438\u043d\u0430 \u0432\u043e\u043b\u043d\u044b \u0444\u043e\u0442\u043e\u044f\u0447\u0435\u0439\u043a\u0438</p>"},{"location":"reference/#usbid","title":"UsbID","text":"<p>         Bases: <code>DeviceID</code></p> <p>\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 usb \u0441\u043f\u0435\u043a\u0442\u0440\u043e\u043c\u0435\u0442\u0440\u0430</p>"},{"location":"reference/#pyspectrum.device_factory.UsbID.vid","title":"<code>vid: int = 1027</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Usb product id</p>"},{"location":"reference/#pyspectrum.device_factory.UsbID.pid","title":"<code>pid: int = 24596</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Usb serial (\u043f\u043e \u0443\u043c\u043e\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0432\u043e\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e \u0441 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u043c\u0438 <code>vid</code> \u0438 <code>pid</code>)</p>"},{"location":"examples/led_parameters/","title":"\u0425\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438 \u043b\u0430\u043c\u043f","text":"In\u00a0[61]: Copied! <pre>from pyspectrum import Spectrometer, UsbID, Spectrum, Data\nimport matplotlib.pyplot as plt\n\nfrom led_calculator import LedParameters\n</pre>  from pyspectrum import Spectrometer, UsbID, Spectrum, Data import matplotlib.pyplot as plt  from led_calculator import LedParameters In\u00a0[62]: Copied! <pre>#read data\ndevice = Spectrometer(UsbID())\ndevice.set_config(\n    exposure=1, n_times=100,\n    wavelength_calibration_path='data/profile.json' \n)\n\ndevice.read_dark_signal(n_times=1000)\n</pre> #read data device = Spectrometer(UsbID()) device.set_config(     exposure=1, n_times=100,     wavelength_calibration_path='data/profile.json'  )  device.read_dark_signal(n_times=1000) In\u00a0[63]: Copied! <pre># \u0427\u0438\u0442\u0430\u0435\u043c 100 \u043a\u0430\u0434\u0440\u043e\u0432 \u0441 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\ns = device.read()\n</pre> # \u0427\u0438\u0442\u0430\u0435\u043c 100 \u043a\u0430\u0434\u0440\u043e\u0432 \u0441 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 s = device.read() In\u00a0[65]: Copied! <pre>led= LedParameters()\n</pre> led= LedParameters() In\u00a0[66]: Copied! <pre>led.run(s)\n</pre> led.run(s) Out[66]: <pre>(0.4387514260380958,\n 0.42429798738643504,\n 3132.1802649148053,\n 0.0,\n {'1': 82.1552302680359,\n  '2': 89.3916113875433,\n  '3': 97.03671380408733,\n  '4': 80.6461800907455,\n  '5': 80.33706071830244,\n  '6': 83.3780593264238,\n  '7': 93.51295962396613,\n  '8': 77.06345371623658,\n  '9': 44.23550623529313,\n  '10': 75.56586302964352,\n  '11': 74.6805405415765,\n  '12': 68.22245959252191,\n  '13': 83.02599130791265,\n  '14': 98.24206873020945,\n  'cri': 80.53526416946416})</pre> In\u00a0[70]: Copied! <pre>led.show()\n</pre> led.show() In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/pyrometer/","title":"\u041f\u0438\u0440\u043e\u043c\u0435\u0442\u0440","text":"In\u00a0[1]: Copied! <pre>from pyspectrum import Spectrometer, UsbID, Spectrum, Data\nimport matplotlib.pyplot as plt\n\nfrom pyrometer import Pyrometer\n</pre> from pyspectrum import Spectrometer, UsbID, Spectrum, Data import matplotlib.pyplot as plt  from pyrometer import Pyrometer In\u00a0[\u00a0]: Copied! <pre># \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0432 \u0432 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435\ndevice = Spectrometer(UsbID())\ndevice.set_config(\n    exposure=1, n_times=100,\n    wavelength_calibration_path='data/profile.json' \n)\n\ndevice.read_dark_signal(n_times=1000)\n</pre> # \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0432 \u0432 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 device = Spectrometer(UsbID()) device.set_config(     exposure=1, n_times=100,     wavelength_calibration_path='data/profile.json'  )  device.read_dark_signal(n_times=1000) In\u00a0[\u00a0]: Copied! <pre># # \u0427\u0438\u0442\u0430\u0435\u043c \u043a\u0430\u043b\u0438\u0431\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0441\u043f\u0435\u043a\u0442\u0440 \u0441 \u043b\u0430\u043c\u043f\u044b (\u0441\u043c. \u043d\u0438\u0436\u0435)\n# calibration_spectrum = device.read()\n\n# # \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# calibration_spectrum.save('data/lamp2')\n</pre> # # \u0427\u0438\u0442\u0430\u0435\u043c \u043a\u0430\u043b\u0438\u0431\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0441\u043f\u0435\u043a\u0442\u0440 \u0441 \u043b\u0430\u043c\u043f\u044b (\u0441\u043c. \u043d\u0438\u0436\u0435) # calibration_spectrum = device.read()  # # \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 # calibration_spectrum.save('data/lamp2') In\u00a0[2]: Copied! <pre># \u041f\u0438\u0440\u043e\u043c\u0435\u0442\u0440\u0443 \u043d\u0443\u0436\u0435\u043d \u043a\u0430\u043b\u0438\u0431\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0441\u043f\u0435\u043a\u0442\u0440\n# \u0414\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0435\u043a\u0442\u0440 \u0431\u044b\u043b \u0437\u0430\u043f\u0438\u0441\u0430\u043d \u0441 \u043b\u0430\u043c\u043f\u044b \u0441 \u0446\u0432\u0435\u0442\u043e\u0432\u043e\u0439 \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u043e\u0439 2800 \u0433\u0440\u0430\u0434\u0443\u0441\u043e\u0432 \u041a\u0435\u043b\u044c\u0432\u0438\u043d\u0430\n# \u0414\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u043a\u0430\u043b\u0438\u0431\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0441\u043f\u0435\u043a\u0442\u0440\u0430 \u0440\u0430\u0441\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0443\u044e \u044f\u0447\u0435\u0439\u043a\u0443\npyrometer = Pyrometer(\n    calibration_spectrum=Spectrum.load('data/lamp2'),\n    calibration_temp=2800,\n)\n</pre>  # \u041f\u0438\u0440\u043e\u043c\u0435\u0442\u0440\u0443 \u043d\u0443\u0436\u0435\u043d \u043a\u0430\u043b\u0438\u0431\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0441\u043f\u0435\u043a\u0442\u0440 # \u0414\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0435\u043a\u0442\u0440 \u0431\u044b\u043b \u0437\u0430\u043f\u0438\u0441\u0430\u043d \u0441 \u043b\u0430\u043c\u043f\u044b \u0441 \u0446\u0432\u0435\u0442\u043e\u0432\u043e\u0439 \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u043e\u0439 2800 \u0433\u0440\u0430\u0434\u0443\u0441\u043e\u0432 \u041a\u0435\u043b\u044c\u0432\u0438\u043d\u0430 # \u0414\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u043a\u0430\u043b\u0438\u0431\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0441\u043f\u0435\u043a\u0442\u0440\u0430 \u0440\u0430\u0441\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0443\u044e \u044f\u0447\u0435\u0439\u043a\u0443 pyrometer = Pyrometer(     calibration_spectrum=Spectrum.load('data/lamp2'),     calibration_temp=2800, ) In\u00a0[\u00a0]: Copied! <pre># \u0427\u0438\u0442\u0430\u0435\u043c 100 \u043a\u0430\u0434\u0440\u043e\u0432 \u0441 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\nmeasured_data = device.read()\n\npyrometer.run(\n    spectrum=measured_data, \n    wavelength_range=(500, 1000) # \u0418\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u0434\u043b\u0438\u043d \u0432\u043e\u043b\u043d, \n                                 # \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0431\u0443\u0434\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c\u0441\u044f \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u0430\n)\n</pre> # \u0427\u0438\u0442\u0430\u0435\u043c 100 \u043a\u0430\u0434\u0440\u043e\u0432 \u0441 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 measured_data = device.read()  pyrometer.run(     spectrum=measured_data,      wavelength_range=(500, 1000) # \u0418\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u0434\u043b\u0438\u043d \u0432\u043e\u043b\u043d,                                   # \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0431\u0443\u0434\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c\u0441\u044f \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u0430 ) In\u00a0[\u00a0]: Copied! <pre>pyrometer.show(filename='result.png')\n</pre> pyrometer.show(filename='result.png') In\u00a0[3]: Copied! <pre># \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u041d\u0430\u0433\u0440\u0435\u0432 \u0433\u0440\u0430\u0444\u0438\u0442\u043e\u0432\u043e\u0439 \u043a\u044e\u0432\u0435\u0442\u044b \u0434\u043e \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u044b ~ 2200 \u0433\u0440\u0430\u0434\u0443\u0441\u043e\u0432\npyrometer.run(Spectrum.load('data/heat_2200'), (500, 1000))\npyrometer.show()\npyrometer.get_temperature()[-1]\n</pre> # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 # \u041d\u0430\u0433\u0440\u0435\u0432 \u0433\u0440\u0430\u0444\u0438\u0442\u043e\u0432\u043e\u0439 \u043a\u044e\u0432\u0435\u0442\u044b \u0434\u043e \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u044b ~ 2200 \u0433\u0440\u0430\u0434\u0443\u0441\u043e\u0432 pyrometer.run(Spectrum.load('data/heat_2200'), (500, 1000)) pyrometer.show() pyrometer.get_temperature()[-1] Out[3]: <pre>2435.5257241761974</pre>"},{"location":"examples/record_spectrum/","title":"\u0427\u0442\u0435\u043d\u0438\u0435 \u0441\u043f\u0435\u043a\u0442\u0440\u0430 \u0438 \u0437\u0430\u043f\u0438\u0441\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0444\u0430\u0439\u043b","text":"In\u00a0[1]: Copied! <pre>from pyspectrum import Spectrometer, UsbID, Spectrum, Data\n</pre> from pyspectrum import Spectrometer, UsbID, Spectrum, Data In\u00a0[6]: Copied! <pre># \u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e\ndevice = Spectrometer(UsbID())\n\n# \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\ndevice.set_config(\n    exposure=1,     # \u042d\u043a\u0441\u043f\u043e\u0437\u0438\u0446\u0438\u044f 1 \u043c\u0441\n    n_times=1000,   # \u0417\u0430 \u043e\u0434\u0438\u043d \u0440\u0430\u0437 \u0431\u0443\u0434\u0435\u0442 \u0441\u0447\u0438\u0442\u0430\u043d\u0430 1000 \u043a\u0430\u0434\u0440\u043e\u0432\n    wavelength_calibration_path='data/profile.json' # \u041f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443 \u043a\u0430\u043b\u0438\u0431\u0440\u043e\u0432\u043a\u0438 \u0434\u043b\u0438\u043d \u0432\u043e\u043b\u043d\n)\n\n# \u0427\u0442\u0435\u043d\u0438\u0435 \u0442\u0435\u043c\u043d\u043e\u0432\u043e\u0433\u043e \u0441\u0438\u0433\u043d\u0430\u043b\u0430 (\u044f\u0447\u0435\u0439\u043a\u0443 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c, \u0437\u0430\u043a\u0440\u044b\u0432 \u0441\u043f\u0435\u043a\u0442\u0440\u043e\u043c\u0435\u0442\u0440 \u043e\u0442 \u0441\u0432\u0435\u0442\u0430)\ndevice.read_dark_signal(n_times=1000)\n</pre> # \u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e device = Spectrometer(UsbID())  # \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 device.set_config(     exposure=1,     # \u042d\u043a\u0441\u043f\u043e\u0437\u0438\u0446\u0438\u044f 1 \u043c\u0441     n_times=1000,   # \u0417\u0430 \u043e\u0434\u0438\u043d \u0440\u0430\u0437 \u0431\u0443\u0434\u0435\u0442 \u0441\u0447\u0438\u0442\u0430\u043d\u0430 1000 \u043a\u0430\u0434\u0440\u043e\u0432     wavelength_calibration_path='data/profile.json' # \u041f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443 \u043a\u0430\u043b\u0438\u0431\u0440\u043e\u0432\u043a\u0438 \u0434\u043b\u0438\u043d \u0432\u043e\u043b\u043d )  # \u0427\u0442\u0435\u043d\u0438\u0435 \u0442\u0435\u043c\u043d\u043e\u0432\u043e\u0433\u043e \u0441\u0438\u0433\u043d\u0430\u043b\u0430 (\u044f\u0447\u0435\u0439\u043a\u0443 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c, \u0437\u0430\u043a\u0440\u044b\u0432 \u0441\u043f\u0435\u043a\u0442\u0440\u043e\u043c\u0435\u0442\u0440 \u043e\u0442 \u0441\u0432\u0435\u0442\u0430) device.read_dark_signal(n_times=1000)  <pre>Wavelength calibration loaded\n</pre> In\u00a0[5]: Copied! <pre># \u0427\u0442\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 (\u0431\u0443\u0434\u0435\u0442 \u0441\u0447\u0438\u0442\u0430\u043d\u0430 1000 \u043a\u0430\u0434\u0440\u043e\u0432)\nspectrum = device.read()\n\n# \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\nspectrum.save('recorded_spectrum')\n</pre> # \u0427\u0442\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 (\u0431\u0443\u0434\u0435\u0442 \u0441\u0447\u0438\u0442\u0430\u043d\u0430 1000 \u043a\u0430\u0434\u0440\u043e\u0432) spectrum = device.read()  # \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 spectrum.save('recorded_spectrum')"},{"location":"examples/record_spectrum/","title":"\u0427\u0442\u0435\u043d\u0438\u0435 \u0441\u043f\u0435\u043a\u0442\u0440\u0430 \u0438 \u0437\u0430\u043f\u0438\u0441\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0444\u0430\u0439\u043b\u00b6","text":""},{"location":"examples/simple_notebook/","title":"Simple notebook","text":"In\u00a0[1]: Copied! <pre>%matplotlib widget\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom IPython.display import display\nimport ipywidgets as widgets\n\nfrom pyspectrum import Spectrometer, usb_spectrometer, FactoryConfig\n</pre> %matplotlib widget import numpy as np import matplotlib.pyplot as plt from IPython.display import display import ipywidgets as widgets  from pyspectrum import Spectrometer, usb_spectrometer, FactoryConfig In\u00a0[2]: Copied! <pre>device = Spectrometer(usb_spectrometer(reopen=True), FactoryConfig.default())\n</pre> device = Spectrometer(usb_spectrometer(reopen=True), FactoryConfig.default()) In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[3]: Copied! <pre>raw_fig = plt.figure()\nraw_ax = raw_fig.add_subplot()\ndef read_raw_data(_):\n    data = device.read_raw()\n    raw_ax.clear()\n    raw_ax.plot(np.mean(data.intensity, axis=0))\n\nread_raw = widgets.Button(description='Read raw')\nread_raw.on_click(read_raw_data)\ndisplay(read_raw)\n</pre> raw_fig = plt.figure() raw_ax = raw_fig.add_subplot() def read_raw_data(_):     data = device.read_raw()     raw_ax.clear()     raw_ax.plot(np.mean(data.intensity, axis=0))  read_raw = widgets.Button(description='Read raw') read_raw.on_click(read_raw_data) display(read_raw) <pre>Button(description='Read raw', style=ButtonStyle())</pre>                      Figure                  In\u00a0[6]: Copied! <pre>def init_config_ui():\n    profile_path_field = widgets.Text(value='data/profile.json')\n    exposure_field = widgets.IntSlider(value=100, min=1,max=1000, description='Exposure')\n    n_times_field = widgets.IntSlider(value=1, min=1, max=10, description='N times')\n    apply_button = widgets.Button(description='Apply')\n    read_dark_signal = widgets.Button(description='Read dark signal')\n    read_dark_signal.on_click(lambda _: device.read_dark_signal())\n    vbox = widgets.VBox([profile_path_field, exposure_field, n_times_field, apply_button])\n    hbox = widgets.HBox(children=[vbox, read_dark_signal])\n    display(hbox)\n    def apply(_):\n        device.set_config(\n            exposure=exposure_field.value,\n            wavelength_calibration_path=profile_path_field.value,\n            n_times=n_times_field.value,\n            )\n    apply_button.on_click(apply)\ninit_config_ui()\n</pre> def init_config_ui():     profile_path_field = widgets.Text(value='data/profile.json')     exposure_field = widgets.IntSlider(value=100, min=1,max=1000, description='Exposure')     n_times_field = widgets.IntSlider(value=1, min=1, max=10, description='N times')     apply_button = widgets.Button(description='Apply')     read_dark_signal = widgets.Button(description='Read dark signal')     read_dark_signal.on_click(lambda _: device.read_dark_signal())     vbox = widgets.VBox([profile_path_field, exposure_field, n_times_field, apply_button])     hbox = widgets.HBox(children=[vbox, read_dark_signal])     display(hbox)     def apply(_):         device.set_config(             exposure=exposure_field.value,             wavelength_calibration_path=profile_path_field.value,             n_times=n_times_field.value,             )     apply_button.on_click(apply) init_config_ui() <pre>HBox(children=(VBox(children=(Text(value='data/profile.json'), IntSlider(value=100, description='Exposure', ma\u2026</pre> <pre>Wavelength calibration loaded\n</pre> In\u00a0[5]: Copied! <pre>p_fig = plt.figure()\np_ax = p_fig.add_subplot()\ndef read_spectrum(_):\n    p_ax.clear()\n    if not device.is_configured:\n        p_ax.text(0, 0, 'Device is not configured')\n        return\n    data = device.read()\n    p_ax.plot(data.wavelength, np.mean(data.intensity, axis=0))\n\nread_p = widgets.Button(description='Read Spectrum')\nread_p.on_click(read_spectrum)\ndisplay(read_p)\n</pre> p_fig = plt.figure() p_ax = p_fig.add_subplot() def read_spectrum(_):     p_ax.clear()     if not device.is_configured:         p_ax.text(0, 0, 'Device is not configured')         return     data = device.read()     p_ax.plot(data.wavelength, np.mean(data.intensity, axis=0))  read_p = widgets.Button(description='Read Spectrum') read_p.on_click(read_spectrum) display(read_p) <pre>Button(description='Read Spectrum', style=ButtonStyle())</pre>                      Figure                  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"}]}