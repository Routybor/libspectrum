{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Libspectrum","text":"<p>Python \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u043f\u0435\u043a\u0442\u0440\u043e\u043c\u0435\u0442\u0440\u043e\u043c \u0447\u0435\u0440\u0435\u0437 USB \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441</p>"},{"location":"#api-reference","title":"\ud83d\udd0d API Reference","text":"<p>\u041f\u043e\u043b\u043d\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f API \u2192</p>"},{"location":"#_1","title":"\ud83d\udcd6 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u0430","text":"<p>\u0414\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f</p> <ul> <li>\ud83d\udcd8 \u041e\u0431\u0437\u043e\u0440 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438</li> <li>\ud83d\udcbf \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430</li> <li>\ud83d\udd0c \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 UsbDevice</li> </ul> <p>\u0414\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430</p> <ul> <li>\ud83c\udfd7\ufe0f \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u044b\u0439 \u043e\u0431\u0437\u043e\u0440</li> <li>\u2699\ufe0f \u0421\u0440\u0435\u0434\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438</li> <li>\ud83d\udcbb \u041f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f</li> <li>\ud83d\udd27 UsbDevice</li> <li>\ud83d\udee0\ufe0f UsbContext</li> <li>\ud83d\udcda \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u043e\u0432</li> </ul>"},{"location":"#_2","title":"\ud83d\udcca \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":"<p>\u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b</p> <ul> <li>\ud83d\udcc8 \u0417\u0430\u043f\u0438\u0441\u044c \u0441\u043f\u0435\u043a\u0442\u0440\u0430 : \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445</li> </ul> <p>\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f</p> <ul> <li> <p>\ud83c\udf21\ufe0f \u041f\u0438\u0440\u043e\u043c\u0435\u0442\u0440 : \u0418\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0435 \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u044b \u043f\u043e \u0441\u043f\u0435\u043a\u0442\u0440\u0443 \u0438\u0437\u043b\u0443\u0447\u0435\u043d\u0438\u044f</p> </li> <li> <p>\ud83d\udca1 \u0425\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438 \u043b\u0430\u043c\u043f : \u0410\u043d\u0430\u043b\u0438\u0437 \u0441\u043f\u0435\u043a\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u0432 \u0441\u0432\u0435\u0442\u0430</p> </li> <li> <p>\ud83c\udfa8 \u041a\u043e\u043b\u043e\u0440\u0438\u043c\u0435\u0442\u0440 : \u0418\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0435 \u0446\u0432\u0435\u0442\u043e\u0432\u044b\u0445 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a</p> </li> </ul>"},{"location":"#_3","title":"\ud83d\udcbb \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b","text":"\u041e\u0421 \u0421\u0442\u0430\u0442\u0443\u0441 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 Windows \u2705 \u041f\u043e\u043b\u043d\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 Linux \u26a0\ufe0f \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 MacOS \u274c \u041d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435</p> <p>\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0435 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u041f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f</p>"},{"location":"reference/","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f API","text":""},{"location":"reference/#spectrometer","title":"\u041a\u043b\u0430\u0441\u0441 Spectrometer","text":"<p>\u041a\u043b\u0430\u0441\u0441, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u0443\u044e \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u043f\u0435\u0442\u0440\u043e\u043c\u0435\u0442\u0440\u043e\u043c</p>"},{"location":"reference/#pyspectrum.Spectrometer.__init__","title":"<code>__init__(vendor=1027, product=24596, factory_config=FactoryConfig.default())</code>","text":"<p>Parameters:</p> Name Type Description Default <code>vendor</code> <code>int</code> <p>\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f.</p> <code>1027</code> <code>product</code> <code>int</code> <p>\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430.</p> <code>24596</code> <code>factory_config</code> <code>FactoryConfig</code> <p>\u0417\u0430\u0432\u043e\u0434\u0441\u043a\u0438\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438</p> <code>default()</code>"},{"location":"reference/#pyspectrum.Spectrometer.close","title":"<code>close()</code>","text":"<p>\u0417\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e\u043c.</p>"},{"location":"reference/#pyspectrum.Spectrometer.dark_signal","title":"<code>dark_signal: Data | None</code>  <code>property</code>","text":"<p>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0442\u0435\u043c\u043d\u043e\u0432\u043e\u0439 \u0441\u0438\u0433\u043d\u0430\u043b.</p>"},{"location":"reference/#pyspectrum.Spectrometer.read_dark_signal","title":"<code>read_dark_signal(n_times=None)</code>","text":"<p>\u0418\u0437\u043c\u0435\u0440\u044f\u0435\u0442 \u0442\u0435\u043c\u043d\u043e\u0432\u043e\u0439 \u0441\u0438\u0433\u043d\u0430\u043b.</p> <p>Parameters:</p> Name Type Description Default <code>n_times</code> <code>Optional[int]</code> <p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439. \u041f\u0440\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043e \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435</p> <code>None</code>"},{"location":"reference/#pyspectrum.Spectrometer.save_dark_signal","title":"<code>save_dark_signal()</code>","text":"<p>\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0442\u0435\u043c\u043d\u043e\u0432\u043e\u0439 \u0441\u0438\u0433\u043d\u0430\u043b \u0432 \u0444\u0430\u0439\u043b.</p>"},{"location":"reference/#pyspectrum.Spectrometer.read_raw","title":"<code>read_raw(n_times=None)</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u044b\u0440\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>n_times</code> <code>Optional[int]</code> <p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439.</p> <code>None</code> <p>Returns:</p> Type Description <code>Data</code> <p>\u0414\u0430\u043d\u043d\u044b\u0435 \u0441 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430.</p>"},{"location":"reference/#pyspectrum.Spectrometer.read","title":"<code>read(force=False)</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0435\u043a\u0442\u0440 \u0441 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>force</code> <code>bool</code> <p>\u0415\u0441\u043b\u0438 <code>True</code>, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0438\u0433\u043d\u0430\u043b \u0431\u0435\u0437 \u043a\u0430\u043b\u0438\u0431\u0440\u043e\u0432\u043a\u0438 \u043f\u043e \u0434\u043b\u0438\u043d\u0430 \u0432\u043e\u043b\u043d</p> <code>False</code> <p>Returns:</p> Type Description <code>Spectrum</code> <p>\u0421\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0435\u043a\u0442\u0440</p>"},{"location":"reference/#pyspectrum.Spectrometer.config","title":"<code>config: Config</code>  <code>property</code>","text":"<p>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0441\u043f\u0435\u043a\u0442\u0440\u043e\u043c\u0435\u0442\u0440\u0430. :rtpe: Config</p>"},{"location":"reference/#pyspectrum.Spectrometer.is_configured","title":"<code>is_configured: bool</code>  <code>property</code>","text":"<p>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 <code>True</code>, \u0435\u0441\u043b\u0438 \u0441\u043f\u0435\u043a\u0442\u0440\u043e\u043c\u0435\u0442\u0440 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.</p>"},{"location":"reference/#pyspectrum.Spectrometer.set_config","title":"<code>set_config(exposure=None, n_times=None, dark_signal_path=None, wavelength_calibration_path=None)</code>","text":"<p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0441\u043f\u0435\u043a\u0442\u0440\u043e\u043c\u0435\u0442\u0440\u0430. \u0412\u0441\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b, \u043f\u0440\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f.</p> <p>Parameters:</p> Name Type Description Default <code>exposure</code> <code>Optional[int]</code> <p>\u0412\u0440\u0435\u043c\u044f \u044d\u043a\u0441\u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u0432 \u043c\u0441. \u041f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u0442\u0435\u043c\u043d\u043e\u0432\u043e\u0439 \u0441\u0438\u0433\u043d\u0430\u043b \u0431\u0443\u0434\u0435\u0442 \u0441\u0431\u0440\u043e\u0448\u0435\u043d.</p> <code>None</code> <code>n_times</code> <code>Optional[int]</code> <p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439</p> <code>None</code> <code>dark_signal_path</code> <code>Optional[str]</code> <p>\u041f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443 \u0442\u0435\u043c\u043d\u043e\u0432\u043e\u0433\u043e \u0441\u0438\u0433\u043d\u0430\u043b\u0430. \u0415\u0441\u043b\u0438 \u0444\u0430\u0439\u043b \u0442\u0435\u043c\u043d\u043e\u0432\u043e\u0433\u043e \u0441\u0438\u0433\u043d\u0430\u043b\u0430 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0438 \u0432\u0430\u043b\u0438\u0434\u0435\u043d, \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d.</p> <code>None</code> <code>wavelength_calibration_path</code> <code>Optional[str]</code> <p>\u041f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u0430\u043b\u0438\u0431\u0440\u043e\u0432\u043a\u0438 \u043f\u043e \u0434\u043b\u0438\u043d\u0435 \u0432\u043e\u043b\u043d\u044b</p> <code>None</code>"},{"location":"reference/#factoryconfig","title":"\u041a\u043b\u0430\u0441\u0441 FactoryConfig","text":"<p>\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438, \u0438\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0430\u0434\u044c\u043d\u044b\u0435 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430.</p>"},{"location":"reference/#pyspectrum.FactoryConfig.load","title":"<code>load(path)</code>  <code>staticmethod</code>","text":"<p>\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0437\u0430\u0432\u043e\u0434\u0441\u043a\u0438\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>\u041f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443 \u0437\u0430\u0432\u043e\u0434\u0441\u043a\u0438\u0445 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a</p> required <p>Returns:</p> Type Description <code>FactoryConfig</code> <p>\u041e\u0431\u044a\u0435\u043a\u0442 \u0437\u0430\u0432\u043e\u0434\u0441\u043a\u0438\u0445 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a</p>"},{"location":"reference/#pyspectrum.FactoryConfig.default","title":"<code>default()</code>  <code>staticmethod</code>","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u0437\u0430\u0432\u043e\u0434\u0441\u043a\u0438\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</p> <p>Returns:</p> Type Description <code>FactoryConfig</code> <p>\u041e\u0431\u044a\u0435\u043a\u0442 \u0437\u0430\u0432\u043e\u0434\u0441\u043a\u0438\u0445 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a</p>"},{"location":"reference/#data","title":"\u041a\u043b\u0430\u0441\u0441 Data","text":"<p>\u0421\u044b\u0440\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0441\u043e \u0441\u043f\u0435\u043a\u0442\u0440\u043e\u043c\u0435\u0442\u0440\u0430</p>"},{"location":"reference/#pyspectrum.Data.intensity","title":"<code>intensity: NDArray[float]</code>  <code>instance-attribute</code>","text":"<p>\u0414\u0432\u0443\u043c\u0435\u0440\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f. \u041f\u0435\u0440\u0432\u044b\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 - \u043d\u043e\u043c\u0435\u0440 \u043a\u0430\u0434\u0440\u0430, \u0432\u0442\u043e\u0440\u043e\u0439 - \u043d\u043e\u043c\u0435\u0440 \u0441\u044d\u043c\u043f\u043b\u0430 \u0432 \u043a\u0430\u0434\u0440\u0435</p>"},{"location":"reference/#pyspectrum.Data.clipped","title":"<code>clipped: NDArray[bool]</code>  <code>instance-attribute</code>","text":"<p>\u041c\u0430\u0441\u0441\u0438\u0432 boolean \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439. \u0415\u0441\u043b\u0438 <code>clipped[i,j]==True</code>, <code>intensity[i,j]</code> \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0437\u0430\u0448\u043a\u0430\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435</p>"},{"location":"reference/#pyspectrum.Data.exposure","title":"<code>exposure: int</code>  <code>instance-attribute</code>","text":"<p>\u042d\u043a\u0441\u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0432 \u043c\u0438\u043b\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445</p>"},{"location":"reference/#pyspectrum.Data.n_times","title":"<code>n_times: int</code>  <code>property</code>","text":"<p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439</p>"},{"location":"reference/#pyspectrum.Data.n_numbers","title":"<code>n_numbers: int</code>  <code>property</code>","text":"<p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0441\u0447\u0435\u0442\u043e\u0432</p>"},{"location":"reference/#pyspectrum.Data.shape","title":"<code>shape: tuple[int, int]</code>  <code>property</code>","text":"<p>\u0420\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u044b\u043d\u0445</p>"},{"location":"reference/#pyspectrum.Data.save","title":"<code>save(path)</code>","text":"<p>\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u0432 \u0444\u0430\u0439\u043b</p>"},{"location":"reference/#pyspectrum.Data.load","title":"<code>load(path)</code>  <code>classmethod</code>","text":"<p>\u041f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430</p>"},{"location":"reference/#spectrum","title":"\u041a\u043b\u0430\u0441\u0441 Spectrum","text":"<p>               Bases: <code>Data</code></p> <p>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0441\u043e \u0441\u043f\u0435\u043a\u0442\u0440\u043e\u043c\u0435\u0442\u0440\u0430. \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u043b\u0438\u043d\u0430\u0445 \u0432\u043e\u043b\u043d \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f. \u0412 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0432\u044b\u0447\u0438\u0442\u0430\u043d\u0438\u0438 \u0442\u0435\u043c\u043d\u043e\u0432\u043e\u0433\u043e \u0441\u0438\u0433\u043d\u0430\u043b\u0430.</p>"},{"location":"reference/#pyspectrum.Spectrum.wavelength","title":"<code>wavelength: NDArray[float]</code>  <code>instance-attribute</code>","text":"<p>\u0434\u043b\u0438\u043d\u0430 \u0432\u043e\u043b\u043d\u044b \u0444\u043e\u0442\u043e\u044f\u0447\u0435\u0439\u043a\u0438</p>"},{"location":"dev-docs/architecture/","title":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u044b\u0439 \u043e\u0431\u0437\u043e\u0440","text":"<p>\u041e\u0431\u0449\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430</p> <p>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0430 \u043d\u0430 \u0434\u0432\u0430 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430:</p> <p>Core Python Library : \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u043f\u0435\u043a\u0442\u0440\u043e\u043c\u0435\u0442\u0440\u0430 (\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u043e\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435)</p> <p>USB Communication Layer : \u0421\u043b\u043e\u0439 \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u0438 \u0441 USB-\u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e\u043c (\u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043d\u0430 Python \u0438 C++)</p>"},{"location":"dev-docs/architecture/#_2","title":"\ud83c\udfd7\ufe0f \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043d\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430","text":"<pre><code>graph TB\n    subgraph Core[\"Core Python Library\"]\n        A[spectrometer.py&lt;br/&gt;Spectrometer]\n        B[data.py&lt;br/&gt;Data, Spectrum]\n        A --&gt;|uses| B\n    end\n\n    subgraph Python[\"USB Communication Layer (Python)\"]\n        C[usb_device.py&lt;br/&gt;UsbDevice]\n        D[usb_context.py&lt;br/&gt;UsbContext]\n        C --&gt;|uses| D\n    end\n\n    subgraph Cpp[\"USB Communication Layer (C++)\"]\n        E[UsbDevice.cpp&lt;br/&gt;UsbDevice]\n        F[UsbContext.cpp&lt;br/&gt;UsbContext]\n        G[Frame.cpp&lt;br/&gt;Frame]\n        E --&gt;|uses| F\n        E --&gt;|uses| G\n    end\n\n    Core --&gt;|depends on| Python\n    Core -.-&gt;|depends on| Cpp\n\n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#fdb,stroke:#333,stroke-width:2px\n    style D fill:#fdb,stroke:#333,stroke-width:2px\n    style E fill:#dfd,stroke:#333,stroke-width:2px\n    style F fill:#dfd,stroke:#333,stroke-width:2px\n    style G fill:#dfd,stroke:#333,stroke-width:2px</code></pre> <p>\u041f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435\u043d\u043d\u0430\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430</p> <ul> <li>\ud83e\ude9f Windows: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 Python-\u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e USB-\u0441\u043b\u043e\u044f</li> <li>\ud83d\udc27 Linux: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 C++-\u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e USB-\u0441\u043b\u043e\u044f</li> <li>\ud83c\udf4e macOS: \u041d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f</li> </ul>"},{"location":"dev-docs/architecture/#_3","title":"\ud83d\udce6 \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438","text":""},{"location":"dev-docs/architecture/#core-python-library","title":"Core Python Library","text":""},{"location":"dev-docs/architecture/#spectrometer-spectrometerpy","title":"\ud83c\udf08 Spectrometer (spectrometer.py)","text":"<ul> <li>\u0412\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f</li> <li>\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u0438 \u043a\u0430\u043b\u0438\u0431\u0440\u043e\u0432\u043a\u0430</li> <li>\u041a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0446\u0438\u044f \u0441\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445</li> <li>\u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044f \u043d\u0430\u0434 USB-\u0441\u043b\u043e\u0435\u043c</li> </ul>"},{"location":"dev-docs/architecture/#data-spectrum-datapy","title":"\ud83d\udcca Data &amp; Spectrum (data.py)","text":"<ul> <li>\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439</li> <li>\u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438</li> <li>\u041f\u0435\u0440\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445</li> </ul>"},{"location":"dev-docs/architecture/#usb-communication-layer-python","title":"USB Communication Layer (Python)","text":""},{"location":"dev-docs/architecture/#usbdevice-usb_devicepy","title":"\ud83d\udd0c UsbDevice (usb_device.py)","text":"<ul> <li>\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430</li> <li>\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0435\u0439</li> <li>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u0430\u0434\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445</li> </ul>"},{"location":"dev-docs/architecture/#usbcontext-usb_contextpy","title":"\ud83d\udee0\ufe0f UsbContext (usb_context.py)","text":"<ul> <li>\u041d\u0438\u0437\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u0435 USB \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438</li> <li>\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c</li> <li>\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 ftd2xx</li> </ul>"},{"location":"dev-docs/architecture/#usb-communication-layer-c","title":"USB Communication Layer (C++)","text":""},{"location":"dev-docs/architecture/#usbdevice-usbdevicecpp","title":"\ud83d\udd0c UsbDevice (UsbDevice.cpp)","text":"<ul> <li>C++ \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430</li> <li>\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e\u043c</li> <li>\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0447\u0435\u0440\u0435\u0437 pybind11</li> </ul>"},{"location":"dev-docs/architecture/#usbcontext-usbcontextcpp","title":"\ud83d\udee0\ufe0f UsbContext (UsbContext.cpp)","text":"<ul> <li>\u041d\u0430\u0442\u0438\u0432\u043d\u044b\u0435 USB \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438</li> <li>\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 libftdi</li> </ul>"},{"location":"dev-docs/architecture/#frame-framecpp","title":"\ud83d\udce5 Frame (Frame.cpp)","text":"<ul> <li>\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043a\u0430\u0434\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445</li> <li>\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u044f \u0432 numpy</li> </ul>"},{"location":"dev-docs/architecture/#_4","title":"\ud83d\udd04 \u041f\u043e\u0442\u043e\u043a \u0434\u0430\u043d\u043d\u044b\u0445","text":"<pre><code>sequenceDiagram\n    participant App as User Application\n    participant Spec as Spectrometer.py\n    participant USB as USB Layer&lt;br/&gt;(Python or C++)\n    participant Dev as Physical Device\n\n    Note over USB: \u0415\u0434\u0438\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u043e\u0431\u0435\u0438\u0445 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439\n\n    App-&gt;&gt;Spec: read()\n    activate Spec\n\n    Spec-&gt;&gt;USB: set_timer(exposure_ms)\n    USB-&gt;&gt;Dev: COMMAND_WRITE_TIMER\n    Dev--&gt;&gt;USB: reply OK\n\n    Spec-&gt;&gt;USB: read_frame(n_times)\n    activate USB\n\n    USB-&gt;&gt;Dev: COMMAND_READ_FRAME\n    Dev--&gt;&gt;USB: #DAT packets\n\n    Note over USB: \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u044b\u0440\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\n    USB--&gt;&gt;Spec: Frame(samples, clipped)\n    deactivate USB\n\n    Note over Spec: \u041a\u043e\u0440\u0440\u0435\u043a\u0446\u0438\u044f \u0442\u0435\u043c\u043d\u043e\u0432\u043e\u0433\u043e \u0441\u0438\u0433\u043d\u0430\u043b\u0430\n\n    Spec--&gt;&gt;App: Spectrum object\n    deactivate Spec</code></pre> <p>\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438</p> <ul> <li>\ud83d\udd04 \u0415\u0434\u0438\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u043e\u0431\u0435\u0438\u0445 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439 USB-\u0441\u043b\u043e\u044f</li> <li>\ud83d\udd12 \u0418\u0437\u043e\u043b\u044f\u0446\u0438\u044f \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u043e-\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0433\u043e \u043a\u043e\u0434\u0430</li> <li>\ud83d\udcca \u0423\u043d\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445</li> </ul>"},{"location":"dev-docs/develop-environment/","title":"\u0421\u0440\u0435\u0434\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438","text":"<p>\u0421\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c</p> <p>\u2705 Windows - \u043f\u043e\u043b\u043d\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u2705 Linux (Ubuntu) - \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0447\u0435\u0440\u0435\u0437 C++ \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u274c macOS - \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f</p>"},{"location":"dev-docs/develop-environment/#_2","title":"\ud83d\ude80 \u041d\u0430\u0447\u0430\u043b\u043e \u0440\u0430\u0431\u043e\u0442\u044b","text":""},{"location":"dev-docs/develop-environment/#_3","title":"\u041e\u0431\u0449\u0438\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f","text":"\u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 Python 3.11+ \u0418\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440 Python Git * \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u0432\u0435\u0440\u0441\u0438\u0439 Hatch * \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u043c"},{"location":"dev-docs/develop-environment/#_4","title":"\u041a\u043b\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f","text":"<pre><code>git clone https://github.com/Routybor/libspectrum.git\ncd libspectrum\n</code></pre>"},{"location":"dev-docs/develop-environment/#windows","title":"\ud83e\ude9f Windows","text":"<p>\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430</p> <p>\u041d\u0430 Windows \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f Python-\u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f USB-\u0441\u043b\u043e\u044f, \u0447\u0442\u043e \u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435.</p>"},{"location":"dev-docs/develop-environment/#_5","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f","text":"<ul> <li>Python 3.11+</li> <li>FTDI D2XX Drivers</li> </ul>"},{"location":"dev-docs/develop-environment/#_6","title":"\u041f\u043e\u0448\u0430\u0433\u043e\u0432\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430","text":"<p>1\ufe0f\u20e3 \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 Python 2\ufe0f\u20e3 \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 FTDI D2XX Drivers 3\ufe0f\u20e3 \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u0441\u0431\u043e\u0440\u043a\u0443:</p> <pre><code>pip install hatch\nhatch build -t wheel\n</code></pre>"},{"location":"dev-docs/develop-environment/#linux-ubuntu","title":"\ud83d\udc27 Linux (Ubuntu)","text":"<p>C++ \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f</p> <p>\u041d\u0430 Linux \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f C++ \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f USB-\u0441\u043b\u043e\u044f \u0434\u043b\u044f \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u0438.</p>"},{"location":"dev-docs/develop-environment/#_7","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439","text":"<pre><code># \u0421\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438\nsudo apt install cmake libftdipp1-dev\n\n# Python \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438\npip install hatch pybind11\n</code></pre>"},{"location":"dev-docs/develop-environment/#_8","title":"\u0421\u0431\u043e\u0440\u043a\u0430","text":"<pre><code>hatch build -t wheel\n</code></pre>"},{"location":"dev-docs/develop-environment/#_9","title":"\ud83d\udd27 \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u0431\u043e\u0440\u043a\u0438","text":""},{"location":"dev-docs/develop-environment/#_10","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b","text":"\u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f Hatch \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 Python \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u043c <code>pyproject.toml</code> CMake \u0421\u0431\u043e\u0440\u043a\u0430 C++ \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 (Linux) <code>CMakeLists.txt</code> PyBind11 \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f Python-\u043a\u043e\u0434\u0430 \u0434\u043b\u044f C++ \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 (Linux) <code>pybind11</code>"},{"location":"dev-docs/develop-environment/#_11","title":"\ud83d\udc68\u200d\ud83d\udcbb \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430","text":""},{"location":"dev-docs/develop-environment/#_12","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439","text":"<pre><code># \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439\npip install -e \".[mkdocs]\"\n\n# \u0417\u0430\u043f\u0443\u0441\u043a \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430\nmkdocs serve\n</code></pre>"},{"location":"dev-docs/develop-environment/#_13","title":"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":"<pre><code>pytest /tests\n</code></pre>"},{"location":"dev-docs/driver-docs/","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u043e\u0432","text":"<p>\u0412 \u044d\u0442\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u044b \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 FTDI \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\u043c\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0438\u0445 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f.</p>"},{"location":"dev-docs/driver-docs/#d2xx","title":"D2XX \u0434\u0440\u0430\u0439\u0432\u0435\u0440","text":"<p>\u041e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 <code>D2XX</code> \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u043e\u043c \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0432 D2XX Programmer Guide</p> <p>\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f Python wrapper \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 ftd2xx \u0432\u0435\u0440\u0441\u0438\u0438 1.3.8.</p> <p>\ud83d\udcda \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f ftd2xx</p>"},{"location":"dev-docs/driver-docs/#libftdi","title":"Libftdi \u0434\u0440\u0430\u0439\u0432\u0435\u0440","text":"<p>\ud83d\udcda API \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Libftdi</p>"},{"location":"dev-docs/driver-docs/#_2","title":"\u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438","text":""},{"location":"dev-docs/driver-docs/#pylibftdi","title":"pylibftdi","text":"<p>pylibftdi - \u044d\u0442\u043e Python wrapper \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 <code>Libftdi</code>.</p> <p>\u0418\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b</p> <p>\u041f\u0440\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0431\u044b\u043b\u0438 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u044b \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0442\u0440\u0443\u0434\u043d\u043e\u0441\u0442\u0438:</p> <ul> <li>\u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 timeout'\u044b \u043f\u0440\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u0445 \u0447\u0442\u0435\u043d\u0438\u044f</li> <li>\u041d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u043f\u0440\u0438 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438</li> </ul>"},{"location":"dev-docs/driver-docs/#pyftdi","title":"pyftdi","text":"<p>pyftdi - \u044d\u0442\u043e \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u0430\u044f Python \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f:</p> <ul> <li>\u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u044b FTDI</li> <li>\u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0447\u0435\u0440\u0435\u0437 libusb</li> <li>\u041e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 Unix \u0441\u0438\u0441\u0442\u0435\u043c\u044b</li> </ul> <p>\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f</p> <p>\u041f\u0440\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u044b \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b, \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u0435 <code>pylibftdi</code></p>"},{"location":"dev-docs/driver-docs/#_3","title":"\u041f\u043b\u0430\u043d\u044b \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u044f","text":"<p>Future Goals</p> <ul> <li>\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b <code>pyftdi</code></li> <li>\u041f\u043e\u0438\u0441\u043a \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u043b\u0435\u043c</li> <li>\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0447\u0438\u0441\u0442\u043e\u0439 Python \u0432\u0435\u0440\u0441\u0438\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438</li> <li>\u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u043d\u043e\u0439 \u043a\u0440\u043e\u0441\u0441\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435\u043d\u043d\u043e\u0441\u0442\u0438</li> </ul>"},{"location":"dev-docs/platform-limitations/","title":"\u041f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<p>\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435</p> <p>\u0412 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0431\u044b\u043b\u0438 \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u044b \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u0432 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0431\u043e\u0442\u044b USB-\u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u0438 \u0441 FTDI-\u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\u043c\u0438 \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430\u0445.</p>"},{"location":"dev-docs/platform-limitations/#windows","title":"Windows","text":"<ul> <li>\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430</li> <li>\u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u0430\u043c\u0438 FTDI</li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043d\u043e\u0432\u0443\u044e Python-\u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e USB-\u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u0438</li> <li>\u041f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 legacy-\u0432\u0435\u0440\u0441\u0438\u0438</li> </ul>"},{"location":"dev-docs/platform-limitations/#linux-ubuntu","title":"Linux (Ubuntu)","text":"<ul> <li>\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0447\u0435\u0440\u0435\u0437 legacy C++ \u043a\u043e\u0434</li> <li>\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u0430\u043c\u0438 \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 Python-\u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438</li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0435\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0441\u0442\u0430\u0440\u043e\u0439 C++ \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043b\u044f USB-\u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u0438</li> <li>\u041f\u043e\u043b\u043d\u043e\u0439 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0438 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0435\u0442</li> </ul>"},{"location":"dev-docs/platform-limitations/#macos","title":"MacOS","text":"<ul> <li>\u041d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f</li> <li>\u0424\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u0430\u043c\u0438 FTDI</li> <li>\u041d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u043a\u0430\u043a D2XX, \u0442\u0430\u043a \u0438 Libftdi \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u043e\u0432</li> <li>\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0438\u0437-\u0437\u0430 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b FTDI-\u0447\u0438\u043f\u0430</li> </ul>"},{"location":"dev-docs/platform-limitations/#_2","title":"\u041f\u0440\u0438\u0447\u0438\u043d\u044b \u043f\u0440\u0438\u043d\u044f\u0442\u044b\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439","text":"<p>\u0420\u0435\u0448\u0435\u043d\u0438\u044f \u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0435 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c \u0431\u044b\u043b\u0438 \u043f\u0440\u0438\u043d\u044f\u0442\u044b \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e\u043c.</p> <p>\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0430\u043a\u0442\u043e\u0440\u044b:</p> <p>\u0421\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u043e\u0432:</p> <ul> <li>Windows \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443</li> <li>Linux \u0438 macOS \u0438\u043c\u0435\u044e\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u0430\u043c\u0438 \u043f\u0440\u0438 \u0447\u0442\u0435\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445</li> </ul> <p>\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c:</p> <ul> <li>\u041d\u0430 Windows Python-\u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u0441\u0440\u0430\u0432\u043d\u0438\u043c\u0443\u044e \u0441 C++</li> <li>\u041d\u0430 Linux \u043f\u043e\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043b\u043e\u0441\u044c \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c C++-\u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438</li> </ul> <p>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430:</p> <ul> <li>\u0424\u043e\u043a\u0443\u0441 \u043d\u0430 Windows \u043a\u0430\u043a \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0435\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e</li> <li>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 Linux \u0447\u0435\u0440\u0435\u0437 C++-\u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u043a\u0430\u043a \u043a\u043e\u043c\u043f\u0440\u043e\u043c\u0438\u0441\u0441\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435</li> <li>MacOS \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0430 \u0438\u0437-\u0437\u0430 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439</li> </ul> <p>\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u044f</p> <p>\u0414\u043b\u044f \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0435\u0433\u043e \u043e\u043f\u044b\u0442\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043d\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435 Windows</p>"},{"location":"dev-docs/usb-context/","title":"\u041f\u043e\u043b\u043d\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0430 UsbContext","text":""},{"location":"dev-docs/usb-context/#pyspectrum.UsbContext","title":"<code>pyspectrum.UsbContext</code>","text":"<p>\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e\u043c FTDI \u0447\u0435\u0440\u0435\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 ftd2xx \u043d\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 Windows.</p>"},{"location":"dev-docs/usb-context/#pyspectrum.UsbContext--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f:","text":"<pre><code>context = UsbContext()\ncontext.open()\ncontext.set_bitmode(0x40, 0x40)\ncontext.set_timeouts(300, 300)\n# \u0412\u0430\u0448 \u043a\u043e\u0434 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e\u043c FTDI...\ncontext.close()\n</code></pre> Source code in <code>pyspectrum/usb_context.py</code> <pre><code>class UsbContext:\n    \"\"\"\n    \u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e\u043c FTDI \u0447\u0435\u0440\u0435\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 ftd2xx \u043d\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 Windows.\n\n    ### \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f:\n    ```python\n    context = UsbContext()\n    context.open()\n    context.set_bitmode(0x40, 0x40)\n    context.set_timeouts(300, 300)\n    # \u0412\u0430\u0448 \u043a\u043e\u0434 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e\u043c FTDI...\n    context.close()\n    ```\n    \"\"\"\n    def __init__(self):\n        self.device = None\n\n    def open(self):\n        \"\"\"\n        \u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u043f\u0435\u0440\u0432\u043e\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u043e\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e FTDI.\n\n        :raises RuntimeError: \u0415\u0441\u043b\u0438 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e \u0438\u043b\u0438 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0435\u0433\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u044c.\n        \"\"\"\n        self.device = ftd.open()\n\n        if not self.device:\n            raise RuntimeError(\"Failed to open device\")\n\n    def close(self):\n        \"\"\"\n        \u0417\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e FTDI.\n        \"\"\"\n        if self.device:\n            self.device.close()\n\n    def set_bitmode(self, mask, enable):\n        \"\"\"\n        \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0440\u0435\u0436\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435 FTDI.\n\n        :param mask: \u041c\u0430\u0441\u043a\u0430 \u0434\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0440\u0435\u0436\u0438\u043c\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0438\u043d\u043e\u0432.\n        :param enable: \u0420\u0435\u0436\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u044b FTDI \u0447\u0438\u043f\u0430 (0x40 - 245 FIFO Mode)\n        \"\"\"\n        self.device.setBitMode(mask, enable)\n\n    def set_timeouts(self, read_timeout_millis: int, write_timeout_millis: int):\n        \"\"\"\n         \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u044b \u0447\u0442\u0435\u043d\u0438\u044f \u0438 \u0437\u0430\u043f\u0438\u0441\u0438 \u0434\u043b\u044f \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 FTDI.\n\n        :param read_timeout_millis: \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0447\u0442\u0435\u043d\u0438\u044f \u0432 \u043c\u0438\u043b\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445.\n        :param write_timeout_millis: \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u043c\u0438\u043b\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445.\n        \"\"\"\n        self.device.setTimeouts(read_timeout_millis, write_timeout_millis)\n\n    def read(self, size) -&gt; bytes:\n        \"\"\"\n         \u0427\u0438\u0442\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 FTDI.\n\n        :param size: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u0439\u0442\u043e\u0432 \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f.\n        :return: \u041f\u0440\u043e\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0432\u0438\u0434\u0435 \u0431\u0430\u0439\u0442\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.\n        :raises RuntimeError: \u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0447\u0442\u0435\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n        \"\"\"\n        try:\n            return self.device.read(size)\n        except Exception:\n            raise RuntimeError(\"Device read error\")\n\n    def write(self, data: bytes) -&gt; int:\n        \"\"\"\n        \u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e FTDI.\n\n        :param data: \u0414\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0432\u0438\u0434\u0435 \u0431\u0430\u0439\u0442\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.\n        :return: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u0431\u0430\u0439\u0442\u043e\u0432.\n        :raises RuntimeError: \u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0437\u0430\u043f\u0438\u0441\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n        \"\"\"\n        try:\n            return self.device.write(data)\n        except Exception:\n            raise RuntimeError(\"Device write error\")\n</code></pre>"},{"location":"dev-docs/usb-context/#pyspectrum.UsbContext.__init__","title":"<code>__init__()</code>","text":"Source code in <code>pyspectrum/usb_context.py</code> <pre><code>def __init__(self):\n    self.device = None\n</code></pre>"},{"location":"dev-docs/usb-context/#pyspectrum.UsbContext.device","title":"<code>device = None</code>  <code>instance-attribute</code>","text":""},{"location":"dev-docs/usb-context/#pyspectrum.UsbContext.open","title":"<code>open()</code>","text":"<p>\u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u043f\u0435\u0440\u0432\u043e\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u043e\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e FTDI.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>\u0415\u0441\u043b\u0438 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e \u0438\u043b\u0438 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0435\u0433\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u044c.</p> Source code in <code>pyspectrum/usb_context.py</code> <pre><code>def open(self):\n    \"\"\"\n    \u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u043f\u0435\u0440\u0432\u043e\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u043e\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e FTDI.\n\n    :raises RuntimeError: \u0415\u0441\u043b\u0438 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e \u0438\u043b\u0438 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0435\u0433\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u044c.\n    \"\"\"\n    self.device = ftd.open()\n\n    if not self.device:\n        raise RuntimeError(\"Failed to open device\")\n</code></pre>"},{"location":"dev-docs/usb-context/#pyspectrum.UsbContext.close","title":"<code>close()</code>","text":"<p>\u0417\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e FTDI.</p> Source code in <code>pyspectrum/usb_context.py</code> <pre><code>def close(self):\n    \"\"\"\n    \u0417\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e FTDI.\n    \"\"\"\n    if self.device:\n        self.device.close()\n</code></pre>"},{"location":"dev-docs/usb-context/#pyspectrum.UsbContext.set_bitmode","title":"<code>set_bitmode(mask, enable)</code>","text":"<p>\u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0440\u0435\u0436\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435 FTDI.</p> <p>Parameters:</p> Name Type Description Default <code>mask</code> <p>\u041c\u0430\u0441\u043a\u0430 \u0434\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0440\u0435\u0436\u0438\u043c\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0438\u043d\u043e\u0432.</p> required <code>enable</code> <p>\u0420\u0435\u0436\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u044b FTDI \u0447\u0438\u043f\u0430 (0x40 - 245 FIFO Mode)</p> required Source code in <code>pyspectrum/usb_context.py</code> <pre><code>def set_bitmode(self, mask, enable):\n    \"\"\"\n    \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0440\u0435\u0436\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435 FTDI.\n\n    :param mask: \u041c\u0430\u0441\u043a\u0430 \u0434\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0440\u0435\u0436\u0438\u043c\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0438\u043d\u043e\u0432.\n    :param enable: \u0420\u0435\u0436\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u044b FTDI \u0447\u0438\u043f\u0430 (0x40 - 245 FIFO Mode)\n    \"\"\"\n    self.device.setBitMode(mask, enable)\n</code></pre>"},{"location":"dev-docs/usb-context/#pyspectrum.UsbContext.set_timeouts","title":"<code>set_timeouts(read_timeout_millis, write_timeout_millis)</code>","text":"<p>\u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u044b \u0447\u0442\u0435\u043d\u0438\u044f \u0438 \u0437\u0430\u043f\u0438\u0441\u0438 \u0434\u043b\u044f \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 FTDI.</p> <p>Parameters:</p> Name Type Description Default <code>read_timeout_millis</code> <code>int</code> <p>\u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0447\u0442\u0435\u043d\u0438\u044f \u0432 \u043c\u0438\u043b\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445.</p> required <code>write_timeout_millis</code> <code>int</code> <p>\u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u043c\u0438\u043b\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445.</p> required Source code in <code>pyspectrum/usb_context.py</code> <pre><code>def set_timeouts(self, read_timeout_millis: int, write_timeout_millis: int):\n    \"\"\"\n     \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u044b \u0447\u0442\u0435\u043d\u0438\u044f \u0438 \u0437\u0430\u043f\u0438\u0441\u0438 \u0434\u043b\u044f \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 FTDI.\n\n    :param read_timeout_millis: \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0447\u0442\u0435\u043d\u0438\u044f \u0432 \u043c\u0438\u043b\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445.\n    :param write_timeout_millis: \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u043c\u0438\u043b\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445.\n    \"\"\"\n    self.device.setTimeouts(read_timeout_millis, write_timeout_millis)\n</code></pre>"},{"location":"dev-docs/usb-context/#pyspectrum.UsbContext.read","title":"<code>read(size)</code>","text":"<p>\u0427\u0438\u0442\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 FTDI.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u0439\u0442\u043e\u0432 \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>\u041f\u0440\u043e\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0432\u0438\u0434\u0435 \u0431\u0430\u0439\u0442\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>\u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0447\u0442\u0435\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.</p> Source code in <code>pyspectrum/usb_context.py</code> <pre><code>def read(self, size) -&gt; bytes:\n    \"\"\"\n     \u0427\u0438\u0442\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 FTDI.\n\n    :param size: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u0439\u0442\u043e\u0432 \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f.\n    :return: \u041f\u0440\u043e\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0432\u0438\u0434\u0435 \u0431\u0430\u0439\u0442\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.\n    :raises RuntimeError: \u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0447\u0442\u0435\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n    \"\"\"\n    try:\n        return self.device.read(size)\n    except Exception:\n        raise RuntimeError(\"Device read error\")\n</code></pre>"},{"location":"dev-docs/usb-context/#pyspectrum.UsbContext.write","title":"<code>write(data)</code>","text":"<p>\u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e FTDI.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>bytes</code> <p>\u0414\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0432\u0438\u0434\u0435 \u0431\u0430\u0439\u0442\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.</p> required <p>Returns:</p> Type Description <code>int</code> <p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u0431\u0430\u0439\u0442\u043e\u0432.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>\u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0437\u0430\u043f\u0438\u0441\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.</p> Source code in <code>pyspectrum/usb_context.py</code> <pre><code>def write(self, data: bytes) -&gt; int:\n    \"\"\"\n    \u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e FTDI.\n\n    :param data: \u0414\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0432\u0438\u0434\u0435 \u0431\u0430\u0439\u0442\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.\n    :return: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u0431\u0430\u0439\u0442\u043e\u0432.\n    :raises RuntimeError: \u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0437\u0430\u043f\u0438\u0441\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n    \"\"\"\n    try:\n        return self.device.write(data)\n    except Exception:\n        raise RuntimeError(\"Device write error\")\n</code></pre>"},{"location":"dev-docs/usb-device/","title":"\u041f\u043e\u043b\u043d\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0430 UsbDevice","text":""},{"location":"dev-docs/usb-device/#pyspectrum.UsbDevice","title":"<code>pyspectrum.UsbDevice</code>","text":"<p>\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 USB \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e\u043c.</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f: <pre><code>device = UsbDevice(vendor=0x0403, product=0x6014)\ndevice.set_timer(1)\nframe = device.read_frame(10)\ndevice.close()\n</code></pre></p> Source code in <code>pyspectrum/usb_device.py</code> <pre><code>class UsbDevice:\n    \"\"\"\n    \u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 USB \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e\u043c.\n\n    \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f:\n    ```python\n    device = UsbDevice(vendor=0x0403, product=0x6014)\n    device.set_timer(1)\n    frame = device.read_frame(10)\n    device.close()\n    ```\n    \"\"\"\n    def __init__(self, vendor: int, product: int, read_timeout=10000):\n        \"\"\"\n        :param int vendor: Vendor ID USB \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\n        :param int product: Product ID USB \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\n        :param int read_timeout: Timeout \u0434\u043b\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0447\u0442\u0435\u043d\u0438\u044f (\u0432 \u043c\u0438\u043b\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445)\n        \"\"\"\n        self.context = UsbContext()\n        self._read_timeout = read_timeout\n        self._pixel_number = 0x1006\n        self._sequence_number = 1\n\n        self.context.open()\n        self.context.set_bitmode(0x40, 0x40)\n        self.context.set_timeouts(300, 300)\n\n        self._send_command(CMD_CODE_WRITE_CR, 0)\n        self._send_command(CMD_CODE_WRITE_TIMER, 0x03e8)\n        self._send_command(CMD_CODE_WRITE_PIXEL_NUMBER, self._pixel_number)\n\n        self._opened: bool = True\n\n    def close(self):\n        \"\"\"\n        \u0417\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 USB \u0421\u043f\u0435\u043a\u0442\u0440\u043e\u043c\u0435\u0442\u0440\u043e\u043c.\n        \"\"\"\n        if not self._opened:\n            raise RuntimeError(\"Device is not opened.\")\n        self.context.close()\n        self._opened = False\n\n    @property\n    def is_opened(self) -&gt; bool:\n        \"\"\"\n        \u041e\u0442\u043a\u0440\u044b\u0442\u043e \u043b\u0438 USB \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e.\n\n        :return: True \u0435\u0441\u043b\u0438 USB Device \u043e\u0442\u043a\u0440\u044b\u0442 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b\n        :rtype: bool\n        \"\"\"\n        return self._opened\n\n    def get_pixel_count(self) -&gt; int:\n        \"\"\"\n        \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043b-\u0432\u043e \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439 \u0432 \u043b\u0438\u043d\u0438\u0438.\n\n        :return: \u041a\u043e\u043b-\u0432\u043e \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439\n        :rtype: int\n        \"\"\"\n        return self._pixel_number\n\n    def _send_command(self, code: int, data: int) -&gt; bytes:\n        \"\"\"\n        \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 USB \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0443 \u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442.\n\n        \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0430\u043a\u0435\u0442\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b:\n        ```\n        - [ #CMD | CMD_CODE | CMD_LENGTH = 4 | SEQ_NUMBER | DATA ]\n        - \u0414\u043b\u0438\u043d\u043d\u0430 `DATA` \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f `CMD_LENGTH` ( &lt;=4, \u043c\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c 4)\n        - SEQ_NUMBER - 2 \u0431\u0430\u0439\u0442\u0430\n        - \u0432\u0441\u0435\u0433\u043e: 12 \u0431\u0430\u0439\u0442\n        ```\n\n        \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0430\u043a\u0435\u0442\u0430 \u043e\u0442\u0432\u0435\u0442\u0430:\n        ```\n        - [ #ANS | ANS_CODE | ANS_LENGTH = 2 | SEQ_NUMBER | DATA ]\n        - \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u044b\u0439 SEQ_NUMBER \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0432 \u043e\u0442\u0432\u0435\u0442\u0435 \u043d\u0430 \u043f\u043e\u0441\u043b\u0430\u043d\u043d\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0432 \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u043d\u043e\u043c \u0432\u0438\u0434\u0435.\n        - ANS_CODE = CMD_SUCCESS | CMD_FALIURE | CMD_UNKNOWN\n        - \u0432\u0441\u0435\u0433\u043e: 10 \u0431\u0430\u0439\u0442\n        ```\n\n        :param int code: \u041a\u043e\u0434 \u043a\u043e\u043c\u0430\u043d\u0434\u044b(`CMD_CODE`)\n        :param int data: \u0414\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043f\u043e\u0441\u044b\u043b\u043a\u0438(`DATA`), \u043c\u044b \u043f\u043e\u0441\u044b\u043b\u0430\u0435\u043c 4 \u0431\u0430\u0439\u0442\u0430\n\n        :return: 10-\u0431\u0430\u0439\u0442\u043e\u0432\u044b\u0439 \u043f\u0430\u043a\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u0430\n        :rtype: bytes\n        \"\"\"\n\n        command = struct.pack('&lt;4sBBH4s',\n                            b'#CMD',\n                            code,\n                            4,\n                            self._sequence_number,\n                            data.to_bytes(4, byteorder=\"little\"))\n\n        self.context.write(bytes(command))\n        ans = self._read_exact(10)\n\n        magic, ans_code, _, seq_number, _ = struct.unpack('&lt;4sBBH2s', ans)\n\n        if magic != b'#ANS':\n            raise RuntimeError(f\"Received bad answer magic: {magic}\")\n        elif seq_number != self._sequence_number:\n            raise RuntimeError(\n                f\"SEQ_NUMBER number mismatch: sent {self._sequence_number}, \"\n                f\"received {seq_number}\"\n            )\n        elif ans_code == CMD_FAILURE:\n            raise RuntimeError(\"Command was not completed\")\n        elif ans_code == CMD_UNKNOWN:\n            raise RuntimeError(f\"Unknown command: {code}\")\n        elif ans_code != CMD_SUCCESS:\n            raise RuntimeError(f\"Unexpected command status: {ans_code}\")\n\n        self._sequence_number = (self._sequence_number + 1) &amp; 0xFFFF # stay in 16 bits range\n        return ans\n\n    def set_timer(self, millis: int):\n        \"\"\"\n        \u0412\u044b\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0433\u043e \u043a\u0430\u0434\u0440\u0430 (\u043d\u0430\u043a\u043e\u043f\u043b\u0435\u043d\u0438\u044f) - \u0432\u0440\u0435\u043c\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0439 \u044d\u043a\u0441\u043f\u043e\u0437\u0438\u0446\u0438\u0438 `\u03c4`.\n\n        \u0411\u0430\u0437\u043e\u0432\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u044d\u043a\u0441\u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0437 \u043c\u0430\u043d\u0442\u0438\u0441\u0441\u044b \u0438 \u044d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0442\u0430\u0439\u043c\u0435\u0440\u0430 \u043a\u0430\u043a:\n\n        `\u03c4 = 0.1 ms * mant * 10 ^ exp`\n\n        \u0420\u0430\u0437\u043c\u0435\u0440\u044b \u043c\u0430\u043d\u0442\u0438\u0441\u0441\u044b \u0438 \u044d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0442\u044b:\n\n        - \u041c\u0430\u043d\u0442\u0438\u0441\u0430 \u0442\u0430\u0439\u043c\u0435\u0440\u0430 - `10 \u0431\u0438\u0442`\n\n        - \u042d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0442\u0430 \u0442\u0430\u0439\u043c\u0435\u0440\u0430 - `2 \u0431\u0438\u0442\u0430`\n\n        \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0430\u043a\u0435\u0442\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b:\n        ```\n        DATA[0] = \u043c\u0430\u043d\u0442\u0438\u0441\u0441\u0430, \u043c\u043b\u0430\u0434\u0448\u0438\u0439 \u0431\u0430\u0439\u0442\n        DATA[1] = \u043c\u0430\u043d\u0442\u0438\u0441\u0441\u0430, \u0441\u0442\u0430\u0440\u0448\u0438\u0439 \u0431\u0430\u0439\u0442\n        DATA[2] = \u044d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0442\u0430\n        DATA[3] = 0\n        ```\n\n        \u041f\u043e\u043b\u0435 `ANS_DATA` \u0432 \u043e\u0442\u0432\u0435\u0442\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 0.\n\n        :param int millis: \u0432\u0440\u0435\u043c\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0439 \u044d\u043a\u0441\u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u0432 \u043c\u0441\n        \"\"\"\n        millis *= 10\n        exponent = 0\n        while millis &gt;= (1 &lt;&lt; 10):\n            exponent += 1\n            millis //= 10\n        if exponent &gt;= 4:\n            raise ValueError(\"Exposure too large\")\n\n        command_data = millis | (exponent &lt;&lt; 16)\n        self._send_command(CMD_CODE_WRITE_TIMER, command_data)\n\n    def _read_exact(self, amount: int) -&gt; bytes:\n        \"\"\"\n        \u0427\u0438\u0442\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u0439\u0442 \u0441 USB \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430.\n\n        :param int amount: \u043a\u043e\u043b-\u0432\u043e \u0431\u0430\u0439\u0442 \u043d\u0430 \u0447\u0442\u0435\u043d\u0438\u0435\n        \"\"\"\n        buffer = bytearray(amount)\n        data_read = 0\n\n        last_successful_read = time.monotonic_ns()\n        while data_read &lt; amount:\n            chunk = self.context.read(amount - data_read)\n            buffer[data_read:data_read+len(chunk)] = chunk\n            data_read += len(chunk)\n\n            current_time = time.monotonic_ns()\n            if (current_time - last_successful_read &gt; self._read_timeout * 1_000_000):\n                raise RuntimeError(\"Device read timeout\")\n        return bytes(buffer)\n\n    def _read_data(self, amount: int) -&gt; bytes:\n        \"\"\"\n        \u0427\u0438\u0442\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435, \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c\u044b\u0435 \u043e\u0442 USB \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 \u0432 \u043f\u0430\u043a\u0435\u0442\u0430\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 `DAT`.\n\n        \u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e `DATA` \u0447\u0430\u0441\u0442\u044c \u0438\u0437 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0430\u043a\u0435\u0442\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438.\n\n        \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0430\u043a\u0435\u0442\u0430 \u0434\u0430\u043d\u043d\u044b\u0445:\n        ```\n        - [ #DAT | DATA_LENGTH | DATA ]\n        - DATA_LENGTH - 2 \u0431\u0430\u0439\u0442\u0430 (\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u0447\u0435\u0442\u043d\u043e\u0435)\n        - DATA - \u043c\u0438\u043d\u0438\u043c\u0443\u043c 400 \u0431\u0430\u0439\u0442 (\u043a\u0440\u043e\u043c\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043f\u0430\u043a\u0435\u0442\u0430)\n        ```\n\n        :param int amount: \u043a\u043e\u043b-\u0432\u043e \u0431\u0430\u0439\u0442 \u043d\u0430 \u0447\u0442\u0435\u043d\u0438\u0435\n        \"\"\"\n        buffer = bytearray(amount)\n        data_read = 0\n\n        while data_read &lt; amount:\n            header = self._read_exact(6)\n            magic, length = struct.unpack('&lt;4sH', header)\n\n            if magic != b'#DAT':\n                raise RuntimeError(\"Received bad #DAT magic from device\")\n\n            if length &gt; (amount - data_read):\n                raise ValueError(\"Trying to read more data than expected\")\n\n            buffer[data_read:data_read+length] = self._read_exact(length)\n            data_read += length\n\n        return bytes(buffer)\n\n    def read_frame(self, n_times: int) -&gt; Frame:\n        \"\"\"\n        \u0427\u0438\u0442\u0430\u0435\u0442 \u043a\u0430\u0434\u0440 \u0441\u043f\u0435\u043a\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 USB \u0441\u043f\u0435\u043a\u0442\u0440\u043e\u043c\u0435\u0442\u0440\u0430.\n\n        \u041e\u0434\u0438\u043d \u043a\u0430\u0434\u0440 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 `n_times` \u043d\u0430\u043a\u043e\u043f\u043b\u0435\u043d\u0438\u0439/\u043b\u0438\u043d\u0438\u0439.\n\n        \u041a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430\u043a\u043e\u043f\u043b\u0435\u043d\u0438\u0435/\u043b\u0438\u043d\u0438\u044f \u0432 \u0441\u0432\u043e\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 `pixelNumber` \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439 \u0432 \u0433\u0438\u0431\u0440\u0438\u0434\u043d\u043e\u0439 \u0441\u0431\u043e\u0440\u043a\u0435 \u0444\u043e\u0442\u043e\u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440\u043e\u0432.\n\n        - `pixelNumber` - \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 `CMD_CODE_WRITE_PIXEL_NUMBER`\n\n        - \u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u0438\u043a\u0441\u0435\u043b\u044c - `2 \u0431\u0430\u0439\u0442\u0430`\n\n        - \u041a\u0430\u0436\u0434\u044b\u0439 \u043a\u0430\u0434\u0440 = `pixelNumber * n_times * 2 \u0431\u0430\u0439\u0442`\n\n        :param int n_times: \u043a\u043e\u043b-\u0432\u043e \u043d\u0430\u043a\u043e\u043f\u043b\u0435\u043d\u0438\u0439/\u043b\u0438\u043d\u0438\u0439 (4 \u0431\u0430\u0439\u0442\u0430 `DATA` \u043f\u043e\u043b\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u044b)\n\n        :return: \u041e\u0431\u044a\u0435\u043a\u0442 \u043a\u0430\u0434\u0440\u0430\n        :rtype: Frame\n        \"\"\"\n        pixel_count = self.get_pixel_count()\n        total_samples = pixel_count * n_times\n\n        self._send_command(CMD_CODE_READ_FRAME, n_times)\n        data = self._read_data(total_samples * 2)\n\n        data_array = np.frombuffer(data, dtype=np.uint16)\n        samples = data_array.reshape((n_times, pixel_count))\n        samples = samples ^ (1 &lt;&lt; 15)\n        clipped = np.where(samples == np.iinfo(np.uint16).max, 1, 0)\n\n        return Frame(samples=samples, clipped=clipped)\n</code></pre>"},{"location":"dev-docs/usb-device/#pyspectrum.UsbDevice.__init__","title":"<code>__init__(vendor, product, read_timeout=10000)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>vendor</code> <code>int</code> <p>Vendor ID USB \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430</p> required <code>product</code> <code>int</code> <p>Product ID USB \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430</p> required <code>read_timeout</code> <code>int</code> <p>Timeout \u0434\u043b\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0447\u0442\u0435\u043d\u0438\u044f (\u0432 \u043c\u0438\u043b\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445)</p> <code>10000</code> Source code in <code>pyspectrum/usb_device.py</code> <pre><code>def __init__(self, vendor: int, product: int, read_timeout=10000):\n    \"\"\"\n    :param int vendor: Vendor ID USB \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\n    :param int product: Product ID USB \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\n    :param int read_timeout: Timeout \u0434\u043b\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0447\u0442\u0435\u043d\u0438\u044f (\u0432 \u043c\u0438\u043b\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445)\n    \"\"\"\n    self.context = UsbContext()\n    self._read_timeout = read_timeout\n    self._pixel_number = 0x1006\n    self._sequence_number = 1\n\n    self.context.open()\n    self.context.set_bitmode(0x40, 0x40)\n    self.context.set_timeouts(300, 300)\n\n    self._send_command(CMD_CODE_WRITE_CR, 0)\n    self._send_command(CMD_CODE_WRITE_TIMER, 0x03e8)\n    self._send_command(CMD_CODE_WRITE_PIXEL_NUMBER, self._pixel_number)\n\n    self._opened: bool = True\n</code></pre>"},{"location":"dev-docs/usb-device/#pyspectrum.UsbDevice.context","title":"<code>context = UsbContext()</code>  <code>instance-attribute</code>","text":""},{"location":"dev-docs/usb-device/#pyspectrum.UsbDevice._read_timeout","title":"<code>_read_timeout = read_timeout</code>  <code>instance-attribute</code>","text":""},{"location":"dev-docs/usb-device/#pyspectrum.UsbDevice._pixel_number","title":"<code>_pixel_number = 4102</code>  <code>instance-attribute</code>","text":""},{"location":"dev-docs/usb-device/#pyspectrum.UsbDevice._sequence_number","title":"<code>_sequence_number = 1</code>  <code>instance-attribute</code>","text":""},{"location":"dev-docs/usb-device/#pyspectrum.UsbDevice._opened","title":"<code>_opened: bool = True</code>  <code>instance-attribute</code>","text":""},{"location":"dev-docs/usb-device/#pyspectrum.UsbDevice.close","title":"<code>close()</code>","text":"<p>\u0417\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 USB \u0421\u043f\u0435\u043a\u0442\u0440\u043e\u043c\u0435\u0442\u0440\u043e\u043c.</p> Source code in <code>pyspectrum/usb_device.py</code> <pre><code>def close(self):\n    \"\"\"\n    \u0417\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 USB \u0421\u043f\u0435\u043a\u0442\u0440\u043e\u043c\u0435\u0442\u0440\u043e\u043c.\n    \"\"\"\n    if not self._opened:\n        raise RuntimeError(\"Device is not opened.\")\n    self.context.close()\n    self._opened = False\n</code></pre>"},{"location":"dev-docs/usb-device/#pyspectrum.UsbDevice.is_opened","title":"<code>is_opened: bool</code>  <code>property</code>","text":"<p>\u041e\u0442\u043a\u0440\u044b\u0442\u043e \u043b\u0438 USB \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True \u0435\u0441\u043b\u0438 USB Device \u043e\u0442\u043a\u0440\u044b\u0442 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b</p>"},{"location":"dev-docs/usb-device/#pyspectrum.UsbDevice.get_pixel_count","title":"<code>get_pixel_count()</code>","text":"<p>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043b-\u0432\u043e \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439 \u0432 \u043b\u0438\u043d\u0438\u0438.</p> <p>Returns:</p> Type Description <code>int</code> <p>\u041a\u043e\u043b-\u0432\u043e \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439</p> Source code in <code>pyspectrum/usb_device.py</code> <pre><code>def get_pixel_count(self) -&gt; int:\n    \"\"\"\n    \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043b-\u0432\u043e \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439 \u0432 \u043b\u0438\u043d\u0438\u0438.\n\n    :return: \u041a\u043e\u043b-\u0432\u043e \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439\n    :rtype: int\n    \"\"\"\n    return self._pixel_number\n</code></pre>"},{"location":"dev-docs/usb-device/#pyspectrum.UsbDevice._send_command","title":"<code>_send_command(code, data)</code>","text":"<p>\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 USB \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0443 \u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442.</p> <p>\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0430\u043a\u0435\u0442\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b: <pre><code>- [ #CMD | CMD_CODE | CMD_LENGTH = 4 | SEQ_NUMBER | DATA ]\n- \u0414\u043b\u0438\u043d\u043d\u0430 `DATA` \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f `CMD_LENGTH` ( &lt;=4, \u043c\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c 4)\n- SEQ_NUMBER - 2 \u0431\u0430\u0439\u0442\u0430\n- \u0432\u0441\u0435\u0433\u043e: 12 \u0431\u0430\u0439\u0442\n</code></pre></p> <p>\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0430\u043a\u0435\u0442\u0430 \u043e\u0442\u0432\u0435\u0442\u0430: <pre><code>- [ #ANS | ANS_CODE | ANS_LENGTH = 2 | SEQ_NUMBER | DATA ]\n- \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u044b\u0439 SEQ_NUMBER \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0432 \u043e\u0442\u0432\u0435\u0442\u0435 \u043d\u0430 \u043f\u043e\u0441\u043b\u0430\u043d\u043d\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0432 \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u043d\u043e\u043c \u0432\u0438\u0434\u0435.\n- ANS_CODE = CMD_SUCCESS | CMD_FALIURE | CMD_UNKNOWN\n- \u0432\u0441\u0435\u0433\u043e: 10 \u0431\u0430\u0439\u0442\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>int</code> <p>\u041a\u043e\u0434 \u043a\u043e\u043c\u0430\u043d\u0434\u044b(<code>CMD_CODE</code>)</p> required <code>data</code> <code>int</code> <p>\u0414\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043f\u043e\u0441\u044b\u043b\u043a\u0438(<code>DATA</code>), \u043c\u044b \u043f\u043e\u0441\u044b\u043b\u0430\u0435\u043c 4 \u0431\u0430\u0439\u0442\u0430</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>10-\u0431\u0430\u0439\u0442\u043e\u0432\u044b\u0439 \u043f\u0430\u043a\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u0430</p> Source code in <code>pyspectrum/usb_device.py</code> <pre><code>def _send_command(self, code: int, data: int) -&gt; bytes:\n    \"\"\"\n    \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 USB \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0443 \u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442.\n\n    \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0430\u043a\u0435\u0442\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b:\n    ```\n    - [ #CMD | CMD_CODE | CMD_LENGTH = 4 | SEQ_NUMBER | DATA ]\n    - \u0414\u043b\u0438\u043d\u043d\u0430 `DATA` \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f `CMD_LENGTH` ( &lt;=4, \u043c\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c 4)\n    - SEQ_NUMBER - 2 \u0431\u0430\u0439\u0442\u0430\n    - \u0432\u0441\u0435\u0433\u043e: 12 \u0431\u0430\u0439\u0442\n    ```\n\n    \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0430\u043a\u0435\u0442\u0430 \u043e\u0442\u0432\u0435\u0442\u0430:\n    ```\n    - [ #ANS | ANS_CODE | ANS_LENGTH = 2 | SEQ_NUMBER | DATA ]\n    - \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u044b\u0439 SEQ_NUMBER \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0432 \u043e\u0442\u0432\u0435\u0442\u0435 \u043d\u0430 \u043f\u043e\u0441\u043b\u0430\u043d\u043d\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0432 \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u043d\u043e\u043c \u0432\u0438\u0434\u0435.\n    - ANS_CODE = CMD_SUCCESS | CMD_FALIURE | CMD_UNKNOWN\n    - \u0432\u0441\u0435\u0433\u043e: 10 \u0431\u0430\u0439\u0442\n    ```\n\n    :param int code: \u041a\u043e\u0434 \u043a\u043e\u043c\u0430\u043d\u0434\u044b(`CMD_CODE`)\n    :param int data: \u0414\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043f\u043e\u0441\u044b\u043b\u043a\u0438(`DATA`), \u043c\u044b \u043f\u043e\u0441\u044b\u043b\u0430\u0435\u043c 4 \u0431\u0430\u0439\u0442\u0430\n\n    :return: 10-\u0431\u0430\u0439\u0442\u043e\u0432\u044b\u0439 \u043f\u0430\u043a\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u0430\n    :rtype: bytes\n    \"\"\"\n\n    command = struct.pack('&lt;4sBBH4s',\n                        b'#CMD',\n                        code,\n                        4,\n                        self._sequence_number,\n                        data.to_bytes(4, byteorder=\"little\"))\n\n    self.context.write(bytes(command))\n    ans = self._read_exact(10)\n\n    magic, ans_code, _, seq_number, _ = struct.unpack('&lt;4sBBH2s', ans)\n\n    if magic != b'#ANS':\n        raise RuntimeError(f\"Received bad answer magic: {magic}\")\n    elif seq_number != self._sequence_number:\n        raise RuntimeError(\n            f\"SEQ_NUMBER number mismatch: sent {self._sequence_number}, \"\n            f\"received {seq_number}\"\n        )\n    elif ans_code == CMD_FAILURE:\n        raise RuntimeError(\"Command was not completed\")\n    elif ans_code == CMD_UNKNOWN:\n        raise RuntimeError(f\"Unknown command: {code}\")\n    elif ans_code != CMD_SUCCESS:\n        raise RuntimeError(f\"Unexpected command status: {ans_code}\")\n\n    self._sequence_number = (self._sequence_number + 1) &amp; 0xFFFF # stay in 16 bits range\n    return ans\n</code></pre>"},{"location":"dev-docs/usb-device/#pyspectrum.UsbDevice.set_timer","title":"<code>set_timer(millis)</code>","text":"<p>\u0412\u044b\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0433\u043e \u043a\u0430\u0434\u0440\u0430 (\u043d\u0430\u043a\u043e\u043f\u043b\u0435\u043d\u0438\u044f) - \u0432\u0440\u0435\u043c\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0439 \u044d\u043a\u0441\u043f\u043e\u0437\u0438\u0446\u0438\u0438 <code>\u03c4</code>.</p> <p>\u0411\u0430\u0437\u043e\u0432\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u044d\u043a\u0441\u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0437 \u043c\u0430\u043d\u0442\u0438\u0441\u0441\u044b \u0438 \u044d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0442\u0430\u0439\u043c\u0435\u0440\u0430 \u043a\u0430\u043a:</p> <p><code>\u03c4 = 0.1 ms * mant * 10 ^ exp</code></p> <p>\u0420\u0430\u0437\u043c\u0435\u0440\u044b \u043c\u0430\u043d\u0442\u0438\u0441\u0441\u044b \u0438 \u044d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0442\u044b:</p> <ul> <li> <p>\u041c\u0430\u043d\u0442\u0438\u0441\u0430 \u0442\u0430\u0439\u043c\u0435\u0440\u0430 - <code>10 \u0431\u0438\u0442</code></p> </li> <li> <p>\u042d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0442\u0430 \u0442\u0430\u0439\u043c\u0435\u0440\u0430 - <code>2 \u0431\u0438\u0442\u0430</code></p> </li> </ul> <p>\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0430\u043a\u0435\u0442\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b: <pre><code>DATA[0] = \u043c\u0430\u043d\u0442\u0438\u0441\u0441\u0430, \u043c\u043b\u0430\u0434\u0448\u0438\u0439 \u0431\u0430\u0439\u0442\nDATA[1] = \u043c\u0430\u043d\u0442\u0438\u0441\u0441\u0430, \u0441\u0442\u0430\u0440\u0448\u0438\u0439 \u0431\u0430\u0439\u0442\nDATA[2] = \u044d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0442\u0430\nDATA[3] = 0\n</code></pre></p> <p>\u041f\u043e\u043b\u0435 <code>ANS_DATA</code> \u0432 \u043e\u0442\u0432\u0435\u0442\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 0.</p> <p>Parameters:</p> Name Type Description Default <code>millis</code> <code>int</code> <p>\u0432\u0440\u0435\u043c\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0439 \u044d\u043a\u0441\u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u0432 \u043c\u0441</p> required Source code in <code>pyspectrum/usb_device.py</code> <pre><code>def set_timer(self, millis: int):\n    \"\"\"\n    \u0412\u044b\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0433\u043e \u043a\u0430\u0434\u0440\u0430 (\u043d\u0430\u043a\u043e\u043f\u043b\u0435\u043d\u0438\u044f) - \u0432\u0440\u0435\u043c\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0439 \u044d\u043a\u0441\u043f\u043e\u0437\u0438\u0446\u0438\u0438 `\u03c4`.\n\n    \u0411\u0430\u0437\u043e\u0432\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u044d\u043a\u0441\u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0437 \u043c\u0430\u043d\u0442\u0438\u0441\u0441\u044b \u0438 \u044d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0442\u0430\u0439\u043c\u0435\u0440\u0430 \u043a\u0430\u043a:\n\n    `\u03c4 = 0.1 ms * mant * 10 ^ exp`\n\n    \u0420\u0430\u0437\u043c\u0435\u0440\u044b \u043c\u0430\u043d\u0442\u0438\u0441\u0441\u044b \u0438 \u044d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0442\u044b:\n\n    - \u041c\u0430\u043d\u0442\u0438\u0441\u0430 \u0442\u0430\u0439\u043c\u0435\u0440\u0430 - `10 \u0431\u0438\u0442`\n\n    - \u042d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0442\u0430 \u0442\u0430\u0439\u043c\u0435\u0440\u0430 - `2 \u0431\u0438\u0442\u0430`\n\n    \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0430\u043a\u0435\u0442\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b:\n    ```\n    DATA[0] = \u043c\u0430\u043d\u0442\u0438\u0441\u0441\u0430, \u043c\u043b\u0430\u0434\u0448\u0438\u0439 \u0431\u0430\u0439\u0442\n    DATA[1] = \u043c\u0430\u043d\u0442\u0438\u0441\u0441\u0430, \u0441\u0442\u0430\u0440\u0448\u0438\u0439 \u0431\u0430\u0439\u0442\n    DATA[2] = \u044d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0442\u0430\n    DATA[3] = 0\n    ```\n\n    \u041f\u043e\u043b\u0435 `ANS_DATA` \u0432 \u043e\u0442\u0432\u0435\u0442\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 0.\n\n    :param int millis: \u0432\u0440\u0435\u043c\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0439 \u044d\u043a\u0441\u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u0432 \u043c\u0441\n    \"\"\"\n    millis *= 10\n    exponent = 0\n    while millis &gt;= (1 &lt;&lt; 10):\n        exponent += 1\n        millis //= 10\n    if exponent &gt;= 4:\n        raise ValueError(\"Exposure too large\")\n\n    command_data = millis | (exponent &lt;&lt; 16)\n    self._send_command(CMD_CODE_WRITE_TIMER, command_data)\n</code></pre>"},{"location":"dev-docs/usb-device/#pyspectrum.UsbDevice._read_exact","title":"<code>_read_exact(amount)</code>","text":"<p>\u0427\u0438\u0442\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u0439\u0442 \u0441 USB \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>int</code> <p>\u043a\u043e\u043b-\u0432\u043e \u0431\u0430\u0439\u0442 \u043d\u0430 \u0447\u0442\u0435\u043d\u0438\u0435</p> required Source code in <code>pyspectrum/usb_device.py</code> <pre><code>def _read_exact(self, amount: int) -&gt; bytes:\n    \"\"\"\n    \u0427\u0438\u0442\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u0439\u0442 \u0441 USB \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430.\n\n    :param int amount: \u043a\u043e\u043b-\u0432\u043e \u0431\u0430\u0439\u0442 \u043d\u0430 \u0447\u0442\u0435\u043d\u0438\u0435\n    \"\"\"\n    buffer = bytearray(amount)\n    data_read = 0\n\n    last_successful_read = time.monotonic_ns()\n    while data_read &lt; amount:\n        chunk = self.context.read(amount - data_read)\n        buffer[data_read:data_read+len(chunk)] = chunk\n        data_read += len(chunk)\n\n        current_time = time.monotonic_ns()\n        if (current_time - last_successful_read &gt; self._read_timeout * 1_000_000):\n            raise RuntimeError(\"Device read timeout\")\n    return bytes(buffer)\n</code></pre>"},{"location":"dev-docs/usb-device/#pyspectrum.UsbDevice._read_data","title":"<code>_read_data(amount)</code>","text":"<p>\u0427\u0438\u0442\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435, \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c\u044b\u0435 \u043e\u0442 USB \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 \u0432 \u043f\u0430\u043a\u0435\u0442\u0430\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 <code>DAT</code>.</p> <p>\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e <code>DATA</code> \u0447\u0430\u0441\u0442\u044c \u0438\u0437 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0430\u043a\u0435\u0442\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438.</p> <p>\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0430\u043a\u0435\u0442\u0430 \u0434\u0430\u043d\u043d\u044b\u0445: <pre><code>- [ #DAT | DATA_LENGTH | DATA ]\n- DATA_LENGTH - 2 \u0431\u0430\u0439\u0442\u0430 (\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u0447\u0435\u0442\u043d\u043e\u0435)\n- DATA - \u043c\u0438\u043d\u0438\u043c\u0443\u043c 400 \u0431\u0430\u0439\u0442 (\u043a\u0440\u043e\u043c\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043f\u0430\u043a\u0435\u0442\u0430)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>int</code> <p>\u043a\u043e\u043b-\u0432\u043e \u0431\u0430\u0439\u0442 \u043d\u0430 \u0447\u0442\u0435\u043d\u0438\u0435</p> required Source code in <code>pyspectrum/usb_device.py</code> <pre><code>def _read_data(self, amount: int) -&gt; bytes:\n    \"\"\"\n    \u0427\u0438\u0442\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435, \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c\u044b\u0435 \u043e\u0442 USB \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 \u0432 \u043f\u0430\u043a\u0435\u0442\u0430\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 `DAT`.\n\n    \u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e `DATA` \u0447\u0430\u0441\u0442\u044c \u0438\u0437 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0430\u043a\u0435\u0442\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438.\n\n    \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0430\u043a\u0435\u0442\u0430 \u0434\u0430\u043d\u043d\u044b\u0445:\n    ```\n    - [ #DAT | DATA_LENGTH | DATA ]\n    - DATA_LENGTH - 2 \u0431\u0430\u0439\u0442\u0430 (\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u0447\u0435\u0442\u043d\u043e\u0435)\n    - DATA - \u043c\u0438\u043d\u0438\u043c\u0443\u043c 400 \u0431\u0430\u0439\u0442 (\u043a\u0440\u043e\u043c\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043f\u0430\u043a\u0435\u0442\u0430)\n    ```\n\n    :param int amount: \u043a\u043e\u043b-\u0432\u043e \u0431\u0430\u0439\u0442 \u043d\u0430 \u0447\u0442\u0435\u043d\u0438\u0435\n    \"\"\"\n    buffer = bytearray(amount)\n    data_read = 0\n\n    while data_read &lt; amount:\n        header = self._read_exact(6)\n        magic, length = struct.unpack('&lt;4sH', header)\n\n        if magic != b'#DAT':\n            raise RuntimeError(\"Received bad #DAT magic from device\")\n\n        if length &gt; (amount - data_read):\n            raise ValueError(\"Trying to read more data than expected\")\n\n        buffer[data_read:data_read+length] = self._read_exact(length)\n        data_read += length\n\n    return bytes(buffer)\n</code></pre>"},{"location":"dev-docs/usb-device/#pyspectrum.UsbDevice.read_frame","title":"<code>read_frame(n_times)</code>","text":"<p>\u0427\u0438\u0442\u0430\u0435\u0442 \u043a\u0430\u0434\u0440 \u0441\u043f\u0435\u043a\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 USB \u0441\u043f\u0435\u043a\u0442\u0440\u043e\u043c\u0435\u0442\u0440\u0430.</p> <p>\u041e\u0434\u0438\u043d \u043a\u0430\u0434\u0440 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 <code>n_times</code> \u043d\u0430\u043a\u043e\u043f\u043b\u0435\u043d\u0438\u0439/\u043b\u0438\u043d\u0438\u0439.</p> <p>\u041a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430\u043a\u043e\u043f\u043b\u0435\u043d\u0438\u0435/\u043b\u0438\u043d\u0438\u044f \u0432 \u0441\u0432\u043e\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 <code>pixelNumber</code> \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439 \u0432 \u0433\u0438\u0431\u0440\u0438\u0434\u043d\u043e\u0439 \u0441\u0431\u043e\u0440\u043a\u0435 \u0444\u043e\u0442\u043e\u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440\u043e\u0432.</p> <ul> <li> <p><code>pixelNumber</code> - \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 <code>CMD_CODE_WRITE_PIXEL_NUMBER</code></p> </li> <li> <p>\u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u0438\u043a\u0441\u0435\u043b\u044c - <code>2 \u0431\u0430\u0439\u0442\u0430</code></p> </li> <li> <p>\u041a\u0430\u0436\u0434\u044b\u0439 \u043a\u0430\u0434\u0440 = <code>pixelNumber * n_times * 2 \u0431\u0430\u0439\u0442</code></p> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>n_times</code> <code>int</code> <p>\u043a\u043e\u043b-\u0432\u043e \u043d\u0430\u043a\u043e\u043f\u043b\u0435\u043d\u0438\u0439/\u043b\u0438\u043d\u0438\u0439 (4 \u0431\u0430\u0439\u0442\u0430 <code>DATA</code> \u043f\u043e\u043b\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u044b)</p> required <p>Returns:</p> Type Description <code>Frame</code> <p>\u041e\u0431\u044a\u0435\u043a\u0442 \u043a\u0430\u0434\u0440\u0430</p> Source code in <code>pyspectrum/usb_device.py</code> <pre><code>def read_frame(self, n_times: int) -&gt; Frame:\n    \"\"\"\n    \u0427\u0438\u0442\u0430\u0435\u0442 \u043a\u0430\u0434\u0440 \u0441\u043f\u0435\u043a\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 USB \u0441\u043f\u0435\u043a\u0442\u0440\u043e\u043c\u0435\u0442\u0440\u0430.\n\n    \u041e\u0434\u0438\u043d \u043a\u0430\u0434\u0440 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 `n_times` \u043d\u0430\u043a\u043e\u043f\u043b\u0435\u043d\u0438\u0439/\u043b\u0438\u043d\u0438\u0439.\n\n    \u041a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430\u043a\u043e\u043f\u043b\u0435\u043d\u0438\u0435/\u043b\u0438\u043d\u0438\u044f \u0432 \u0441\u0432\u043e\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 `pixelNumber` \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439 \u0432 \u0433\u0438\u0431\u0440\u0438\u0434\u043d\u043e\u0439 \u0441\u0431\u043e\u0440\u043a\u0435 \u0444\u043e\u0442\u043e\u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440\u043e\u0432.\n\n    - `pixelNumber` - \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 `CMD_CODE_WRITE_PIXEL_NUMBER`\n\n    - \u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u0438\u043a\u0441\u0435\u043b\u044c - `2 \u0431\u0430\u0439\u0442\u0430`\n\n    - \u041a\u0430\u0436\u0434\u044b\u0439 \u043a\u0430\u0434\u0440 = `pixelNumber * n_times * 2 \u0431\u0430\u0439\u0442`\n\n    :param int n_times: \u043a\u043e\u043b-\u0432\u043e \u043d\u0430\u043a\u043e\u043f\u043b\u0435\u043d\u0438\u0439/\u043b\u0438\u043d\u0438\u0439 (4 \u0431\u0430\u0439\u0442\u0430 `DATA` \u043f\u043e\u043b\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u044b)\n\n    :return: \u041e\u0431\u044a\u0435\u043a\u0442 \u043a\u0430\u0434\u0440\u0430\n    :rtype: Frame\n    \"\"\"\n    pixel_count = self.get_pixel_count()\n    total_samples = pixel_count * n_times\n\n    self._send_command(CMD_CODE_READ_FRAME, n_times)\n    data = self._read_data(total_samples * 2)\n\n    data_array = np.frombuffer(data, dtype=np.uint16)\n    samples = data_array.reshape((n_times, pixel_count))\n    samples = samples ^ (1 &lt;&lt; 15)\n    clipped = np.where(samples == np.iinfo(np.uint16).max, 1, 0)\n\n    return Frame(samples=samples, clipped=clipped)\n</code></pre>"},{"location":"examples/colorimeter/","title":"\u041a\u043e\u043b\u043e\u0440\u0438\u043c\u0435\u0442\u0440","text":"In\u00a0[2]: Copied! <pre>import matplotlib.pyplot as plt\nimport numpy as np\nfrom pyspectrum import Spectrometer, usb_spectrometer\nfrom colorimeter import Colorimeter\n</pre> import matplotlib.pyplot as plt import numpy as np from pyspectrum import Spectrometer, usb_spectrometer from colorimeter import Colorimeter  In\u00a0[14]: Copied! <pre>device = Spectrometer(usb_spectrometer(0x0403, 0x6014))\ndevice.set_config(\n    exposure=100, n_times=1,\n    wavelength_calibration_path='data/profile.json' \n)\n\ndevice.read_dark_signal(n_times=10)\n</pre> device = Spectrometer(usb_spectrometer(0x0403, 0x6014)) device.set_config(     exposure=100, n_times=1,     wavelength_calibration_path='data/profile.json'  )  device.read_dark_signal(n_times=10)  <pre>Wavelength calibration loaded\n</pre> In\u00a0[3]: Copied! <pre>white_spectrum = device.read()\nplt.plot(white_spectrum.wavelength, white_spectrum.intensity[0])\nplt.ylim(0, max(white_spectrum.intensity[0]))\nplt.show()\n</pre> white_spectrum = device.read() plt.plot(white_spectrum.wavelength, white_spectrum.intensity[0]) plt.ylim(0, max(white_spectrum.intensity[0])) plt.show()  In\u00a0[4]: Copied! <pre>spectrum = device.read()\nplt.plot(white_spectrum.wavelength, white_spectrum.intensity[0])\nplt.plot(spectrum.wavelength, spectrum.intensity[0])\nplt.ylim(0, max(white_spectrum.intensity[0]))\nplt.show()\n</pre> spectrum = device.read() plt.plot(white_spectrum.wavelength, white_spectrum.intensity[0]) plt.plot(spectrum.wavelength, spectrum.intensity[0]) plt.ylim(0, max(white_spectrum.intensity[0])) plt.show()  In\u00a0[5]: Copied! <pre>colorimeter = Colorimeter(white_spectrum, illuminant='D65', observer='2deg')\ncolorimeter.measure(spectrum)\nprint(f'Using illuminant \"{colorimeter.illuminant}\" and observer \"{colorimeter.observer}\"')\nprint()\nprint('XYZ:                      ', *colorimeter.XYZ(), sep='\\t')\nprint('xyY:                      ', *colorimeter.xyY(), sep='\\t')\nprint()\nprint('Lab:                      ', *colorimeter.Lab(), sep='\\t')\nprint('LCh(ab):                  ', *colorimeter.LCh_ab(), sep='\\t')\nprint('Luv:                      ', *colorimeter.Luv(), sep='\\t')\nprint('LCh(uv):                  ', *colorimeter.LCh_uv(), sep='\\t')\nprint()\nprint('sRGB (No adaptation):     ', *colorimeter.RGB('sRGB', None), sep='\\t')\nprint('sRGB (XYZ Scaling):       ', *colorimeter.RGB('sRGB', 'XYZ Scaling'), sep='\\t')\nprint('sRGB (Bradford):          ', *colorimeter.RGB('sRGB', 'Bradford'), sep='\\t')\nprint('sRGB (Von Kries):         ', *colorimeter.RGB('sRGB', 'Von Kries'), sep='\\t')\nprint()\nprint('Adobe RGB (No adaptation):', *colorimeter.RGB('Adobe RGB', None), sep='\\t')\nprint('Adobe RGB (XYZ Scaling):  ', *colorimeter.RGB('Adobe RGB', 'XYZ Scaling'), sep='\\t')\nprint('Adobe RGB (Bradford):     ', *colorimeter.RGB('Adobe RGB', 'Bradford'), sep='\\t')\nprint('Adobe RGB (Von Kries):    ', *colorimeter.RGB('Adobe RGB', 'Von Kries'), sep='\\t')\nprint()\nprint('CIE RGB (No adaptation):  ', *colorimeter.RGB('CIE RGB', None), sep='\\t')\nprint('CIE RGB (XYZ Scaling):    ', *colorimeter.RGB('CIE RGB', 'XYZ Scaling'), sep='\\t')\nprint('CIE RGB (Bradford):       ', *colorimeter.RGB('CIE RGB', 'Bradford'), sep='\\t')\nprint('CIE RGB (Von Kries):      ', *colorimeter.RGB('CIE RGB', 'Von Kries'), sep='\\t')\n\nrgb_spaces = ['sRGB', 'Adobe RGB', 'CIE RGB']\nadaptation_methods = [None, 'XYZ Scaling', 'Bradford', 'Von Kries']\nplt.imshow([[colorimeter.RGB(rgb, adapt) for adapt in adaptation_methods] for rgb in rgb_spaces])\nplt.xticks(np.arange(4), adaptation_methods)\nplt.yticks(np.arange(3), rgb_spaces)\nplt.show()\n</pre> colorimeter = Colorimeter(white_spectrum, illuminant='D65', observer='2deg') colorimeter.measure(spectrum) print(f'Using illuminant \"{colorimeter.illuminant}\" and observer \"{colorimeter.observer}\"') print() print('XYZ:                      ', *colorimeter.XYZ(), sep='\\t') print('xyY:                      ', *colorimeter.xyY(), sep='\\t') print() print('Lab:                      ', *colorimeter.Lab(), sep='\\t') print('LCh(ab):                  ', *colorimeter.LCh_ab(), sep='\\t') print('Luv:                      ', *colorimeter.Luv(), sep='\\t') print('LCh(uv):                  ', *colorimeter.LCh_uv(), sep='\\t') print() print('sRGB (No adaptation):     ', *colorimeter.RGB('sRGB', None), sep='\\t') print('sRGB (XYZ Scaling):       ', *colorimeter.RGB('sRGB', 'XYZ Scaling'), sep='\\t') print('sRGB (Bradford):          ', *colorimeter.RGB('sRGB', 'Bradford'), sep='\\t') print('sRGB (Von Kries):         ', *colorimeter.RGB('sRGB', 'Von Kries'), sep='\\t') print() print('Adobe RGB (No adaptation):', *colorimeter.RGB('Adobe RGB', None), sep='\\t') print('Adobe RGB (XYZ Scaling):  ', *colorimeter.RGB('Adobe RGB', 'XYZ Scaling'), sep='\\t') print('Adobe RGB (Bradford):     ', *colorimeter.RGB('Adobe RGB', 'Bradford'), sep='\\t') print('Adobe RGB (Von Kries):    ', *colorimeter.RGB('Adobe RGB', 'Von Kries'), sep='\\t') print() print('CIE RGB (No adaptation):  ', *colorimeter.RGB('CIE RGB', None), sep='\\t') print('CIE RGB (XYZ Scaling):    ', *colorimeter.RGB('CIE RGB', 'XYZ Scaling'), sep='\\t') print('CIE RGB (Bradford):       ', *colorimeter.RGB('CIE RGB', 'Bradford'), sep='\\t') print('CIE RGB (Von Kries):      ', *colorimeter.RGB('CIE RGB', 'Von Kries'), sep='\\t')  rgb_spaces = ['sRGB', 'Adobe RGB', 'CIE RGB'] adaptation_methods = [None, 'XYZ Scaling', 'Bradford', 'Von Kries'] plt.imshow([[colorimeter.RGB(rgb, adapt) for adapt in adaptation_methods] for rgb in rgb_spaces]) plt.xticks(np.arange(4), adaptation_methods) plt.yticks(np.arange(3), rgb_spaces) plt.show()  <pre>Using illuminant \"D65\" and observer \"2deg\"\n\nXYZ:                      \t0.23679611454210248\t0.13423255893495578\t0.025435692406365385\nxyY:                      \t0.5972696033209955\t0.33857408253034654\t0.13423255893495578\n\nLab:                      \t43.394187506474374\t58.60741551163834\t45.23072527883585\nLCh(ab):                  \t43.394187506474374\t74.0313964626046\t37.65944165985406\nLuv:                      \t43.394187506474374\t118.05573071146813\t28.72412487424316\nLCh(uv):                  \t43.394187506474374\t121.49992141400666\t13.674911434431303\n\nsRGB (No adaptation):     \t0.7663225084071442\t0.16552201526690988\t0.11595925899916254\nsRGB (XYZ Scaling):       \t0.7663225084071442\t0.16552201526690988\t0.11595925899916254\nsRGB (Bradford):          \t0.7663225084071442\t0.16552201526691\t0.11595925899916254\nsRGB (Von Kries):         \t0.7663225084071443\t0.16552201526690988\t0.11595925899916254\n\nAdobe RGB (No adaptation):\t0.658442827039782\t0.1813006858280815\t0.13948204148268578\nAdobe RGB (XYZ Scaling):  \t0.658442827039782\t0.1813006858280815\t0.13948204148268578\nAdobe RGB (Bradford):     \t0.658442827039782\t0.1813006858280814\t0.13948204148268578\nAdobe RGB (Von Kries):    \t0.658442827039782\t0.18130068582808131\t0.13948204148268578\n\nCIE RGB (No adaptation):  \t0.6803546800928568\t0.3022068680343226\t0.18680270691294498\nCIE RGB (XYZ Scaling):    \t0.7017929230986196\t0.2893957757535993\t0.17976701479224164\nCIE RGB (Bradford):       \t0.702766367027658\t0.30180430050522716\t0.1787296383794723\nCIE RGB (Von Kries):      \t0.6987113682772323\t0.29331426537159055\t0.17969490582287706\n</pre> In\u00a0[13]: Copied! <pre>device.close()\n</pre> device.close()"},{"location":"examples/led_parameters/","title":"\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u043f\u0435\u043a\u0442\u0440\u0430","text":"In\u00a0[61]: Copied! <pre>from pyspectrum import Spectrometer, UsbID, Spectrum, Data\nimport matplotlib.pyplot as plt\n\nfrom led_calculator import LedParameters\n</pre>  from pyspectrum import Spectrometer, UsbID, Spectrum, Data import matplotlib.pyplot as plt  from led_calculator import LedParameters In\u00a0[62]: Copied! <pre>#read data\ndevice = Spectrometer(UsbID())\ndevice.set_config(\n    exposure=1, n_times=100,\n    wavelength_calibration_path='data/profile.json' \n)\n\ndevice.read_dark_signal(n_times=1000)\n</pre> #read data device = Spectrometer(UsbID()) device.set_config(     exposure=1, n_times=100,     wavelength_calibration_path='data/profile.json'  )  device.read_dark_signal(n_times=1000) In\u00a0[63]: Copied! <pre># \u0427\u0438\u0442\u0430\u0435\u043c 100 \u043a\u0430\u0434\u0440\u043e\u0432 \u0441 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\ns = device.read()\n</pre> # \u0427\u0438\u0442\u0430\u0435\u043c 100 \u043a\u0430\u0434\u0440\u043e\u0432 \u0441 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 s = device.read() In\u00a0[65]: Copied! <pre>led= LedParameters()\n</pre> led= LedParameters() In\u00a0[66]: Copied! <pre>led.run(s)\n</pre> led.run(s) Out[66]: <pre>(0.4387514260380958,\n 0.42429798738643504,\n 3132.1802649148053,\n 0.0,\n {'1': 82.1552302680359,\n  '2': 89.3916113875433,\n  '3': 97.03671380408733,\n  '4': 80.6461800907455,\n  '5': 80.33706071830244,\n  '6': 83.3780593264238,\n  '7': 93.51295962396613,\n  '8': 77.06345371623658,\n  '9': 44.23550623529313,\n  '10': 75.56586302964352,\n  '11': 74.6805405415765,\n  '12': 68.22245959252191,\n  '13': 83.02599130791265,\n  '14': 98.24206873020945,\n  'cri': 80.53526416946416})</pre> In\u00a0[70]: Copied! <pre>led.show()\n</pre> led.show() In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/pyrometer/","title":"\u041f\u0438\u0440\u043e\u043c\u0435\u0442\u0440","text":"In\u00a0[1]: Copied! <pre>from pyspectrum import Spectrometer, UsbID, Spectrum, Data\nimport matplotlib.pyplot as plt\n\nfrom pyrometer import Pyrometer\n</pre> from pyspectrum import Spectrometer, UsbID, Spectrum, Data import matplotlib.pyplot as plt  from pyrometer import Pyrometer In\u00a0[\u00a0]: Copied! <pre># \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0432 \u0432 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435\ndevice = Spectrometer(UsbID())\ndevice.set_config(\n    exposure=1, n_times=100,\n    wavelength_calibration_path='data/profile.json' \n)\n\ndevice.read_dark_signal(n_times=1000)\n</pre> # \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0432 \u0432 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 device = Spectrometer(UsbID()) device.set_config(     exposure=1, n_times=100,     wavelength_calibration_path='data/profile.json'  )  device.read_dark_signal(n_times=1000) In\u00a0[\u00a0]: Copied! <pre># # \u0427\u0438\u0442\u0430\u0435\u043c \u043a\u0430\u043b\u0438\u0431\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0441\u043f\u0435\u043a\u0442\u0440 \u0441 \u043b\u0430\u043c\u043f\u044b (\u0441\u043c. \u043d\u0438\u0436\u0435)\n# calibration_spectrum = device.read()\n\n# # \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# calibration_spectrum.save('data/lamp2')\n</pre> # # \u0427\u0438\u0442\u0430\u0435\u043c \u043a\u0430\u043b\u0438\u0431\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0441\u043f\u0435\u043a\u0442\u0440 \u0441 \u043b\u0430\u043c\u043f\u044b (\u0441\u043c. \u043d\u0438\u0436\u0435) # calibration_spectrum = device.read()  # # \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 # calibration_spectrum.save('data/lamp2') In\u00a0[2]: Copied! <pre># \u041f\u0438\u0440\u043e\u043c\u0435\u0442\u0440\u0443 \u043d\u0443\u0436\u0435\u043d \u043a\u0430\u043b\u0438\u0431\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0441\u043f\u0435\u043a\u0442\u0440\n# \u0414\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0435\u043a\u0442\u0440 \u0431\u044b\u043b \u0437\u0430\u043f\u0438\u0441\u0430\u043d \u0441 \u043b\u0430\u043c\u043f\u044b \u0441 \u0446\u0432\u0435\u0442\u043e\u0432\u043e\u0439 \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u043e\u0439 2800 \u0433\u0440\u0430\u0434\u0443\u0441\u043e\u0432 \u041a\u0435\u043b\u044c\u0432\u0438\u043d\u0430\n# \u0414\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u043a\u0430\u043b\u0438\u0431\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0441\u043f\u0435\u043a\u0442\u0440\u0430 \u0440\u0430\u0441\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0443\u044e \u044f\u0447\u0435\u0439\u043a\u0443\npyrometer = Pyrometer(\n    calibration_spectrum=Spectrum.load('data/lamp2'),\n    calibration_temp=2800,\n)\n</pre>  # \u041f\u0438\u0440\u043e\u043c\u0435\u0442\u0440\u0443 \u043d\u0443\u0436\u0435\u043d \u043a\u0430\u043b\u0438\u0431\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0441\u043f\u0435\u043a\u0442\u0440 # \u0414\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0435\u043a\u0442\u0440 \u0431\u044b\u043b \u0437\u0430\u043f\u0438\u0441\u0430\u043d \u0441 \u043b\u0430\u043c\u043f\u044b \u0441 \u0446\u0432\u0435\u0442\u043e\u0432\u043e\u0439 \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u043e\u0439 2800 \u0433\u0440\u0430\u0434\u0443\u0441\u043e\u0432 \u041a\u0435\u043b\u044c\u0432\u0438\u043d\u0430 # \u0414\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u043a\u0430\u043b\u0438\u0431\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0441\u043f\u0435\u043a\u0442\u0440\u0430 \u0440\u0430\u0441\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0443\u044e \u044f\u0447\u0435\u0439\u043a\u0443 pyrometer = Pyrometer(     calibration_spectrum=Spectrum.load('data/lamp2'),     calibration_temp=2800, ) In\u00a0[\u00a0]: Copied! <pre># \u0427\u0438\u0442\u0430\u0435\u043c 100 \u043a\u0430\u0434\u0440\u043e\u0432 \u0441 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\nmeasured_data = device.read()\n\npyrometer.run(\n    spectrum=measured_data, \n    wavelength_range=(500, 1000) # \u0418\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u0434\u043b\u0438\u043d \u0432\u043e\u043b\u043d, \n                                 # \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0431\u0443\u0434\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c\u0441\u044f \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u0430\n)\n</pre> # \u0427\u0438\u0442\u0430\u0435\u043c 100 \u043a\u0430\u0434\u0440\u043e\u0432 \u0441 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 measured_data = device.read()  pyrometer.run(     spectrum=measured_data,      wavelength_range=(500, 1000) # \u0418\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u0434\u043b\u0438\u043d \u0432\u043e\u043b\u043d,                                   # \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0431\u0443\u0434\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c\u0441\u044f \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u0430 ) In\u00a0[\u00a0]: Copied! <pre>pyrometer.show(filename='result.png')\n</pre> pyrometer.show(filename='result.png') In\u00a0[3]: Copied! <pre># \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u041d\u0430\u0433\u0440\u0435\u0432 \u0433\u0440\u0430\u0444\u0438\u0442\u043e\u0432\u043e\u0439 \u043a\u044e\u0432\u0435\u0442\u044b \u0434\u043e \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u044b ~ 2200 \u0433\u0440\u0430\u0434\u0443\u0441\u043e\u0432\npyrometer.run(Spectrum.load('data/heat_2200'), (500, 1000))\npyrometer.show()\npyrometer.get_temperature()[-1]\n</pre> # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 # \u041d\u0430\u0433\u0440\u0435\u0432 \u0433\u0440\u0430\u0444\u0438\u0442\u043e\u0432\u043e\u0439 \u043a\u044e\u0432\u0435\u0442\u044b \u0434\u043e \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u044b ~ 2200 \u0433\u0440\u0430\u0434\u0443\u0441\u043e\u0432 pyrometer.run(Spectrum.load('data/heat_2200'), (500, 1000)) pyrometer.show() pyrometer.get_temperature()[-1] Out[3]: <pre>2435.5257241761974</pre>"},{"location":"examples/record_spectrum/","title":"\u0427\u0442\u0435\u043d\u0438\u0435 \u0441\u043f\u0435\u043a\u0442\u0440\u0430 \u0438 \u0437\u0430\u043f\u0438\u0441\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0444\u0430\u0439\u043b","text":"In\u00a0[1]: Copied! <pre>from pyspectrum import Spectrometer, UsbID, Spectrum, Data\n</pre> from pyspectrum import Spectrometer, UsbID, Spectrum, Data In\u00a0[6]: Copied! <pre># \u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e\ndevice = Spectrometer(UsbID())\n\n# \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\ndevice.set_config(\n    exposure=1,     # \u042d\u043a\u0441\u043f\u043e\u0437\u0438\u0446\u0438\u044f 1 \u043c\u0441\n    n_times=1000,   # \u0417\u0430 \u043e\u0434\u0438\u043d \u0440\u0430\u0437 \u0431\u0443\u0434\u0435\u0442 \u0441\u0447\u0438\u0442\u0430\u043d\u0430 1000 \u043a\u0430\u0434\u0440\u043e\u0432\n    wavelength_calibration_path='data/profile.json' # \u041f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443 \u043a\u0430\u043b\u0438\u0431\u0440\u043e\u0432\u043a\u0438 \u0434\u043b\u0438\u043d \u0432\u043e\u043b\u043d\n)\n\n# \u0427\u0442\u0435\u043d\u0438\u0435 \u0442\u0435\u043c\u043d\u043e\u0432\u043e\u0433\u043e \u0441\u0438\u0433\u043d\u0430\u043b\u0430 (\u044f\u0447\u0435\u0439\u043a\u0443 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c, \u0437\u0430\u043a\u0440\u044b\u0432 \u0441\u043f\u0435\u043a\u0442\u0440\u043e\u043c\u0435\u0442\u0440 \u043e\u0442 \u0441\u0432\u0435\u0442\u0430)\ndevice.read_dark_signal(n_times=1000)\n</pre> # \u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e device = Spectrometer(UsbID())  # \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 device.set_config(     exposure=1,     # \u042d\u043a\u0441\u043f\u043e\u0437\u0438\u0446\u0438\u044f 1 \u043c\u0441     n_times=1000,   # \u0417\u0430 \u043e\u0434\u0438\u043d \u0440\u0430\u0437 \u0431\u0443\u0434\u0435\u0442 \u0441\u0447\u0438\u0442\u0430\u043d\u0430 1000 \u043a\u0430\u0434\u0440\u043e\u0432     wavelength_calibration_path='data/profile.json' # \u041f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443 \u043a\u0430\u043b\u0438\u0431\u0440\u043e\u0432\u043a\u0438 \u0434\u043b\u0438\u043d \u0432\u043e\u043b\u043d )  # \u0427\u0442\u0435\u043d\u0438\u0435 \u0442\u0435\u043c\u043d\u043e\u0432\u043e\u0433\u043e \u0441\u0438\u0433\u043d\u0430\u043b\u0430 (\u044f\u0447\u0435\u0439\u043a\u0443 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c, \u0437\u0430\u043a\u0440\u044b\u0432 \u0441\u043f\u0435\u043a\u0442\u0440\u043e\u043c\u0435\u0442\u0440 \u043e\u0442 \u0441\u0432\u0435\u0442\u0430) device.read_dark_signal(n_times=1000)  <pre>Wavelength calibration loaded\n</pre> In\u00a0[5]: Copied! <pre># \u0427\u0442\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 (\u0431\u0443\u0434\u0435\u0442 \u0441\u0447\u0438\u0442\u0430\u043d\u0430 1000 \u043a\u0430\u0434\u0440\u043e\u0432)\nspectrum = device.read()\n\n# \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\nspectrum.save('recorded_spectrum')\n</pre> # \u0427\u0442\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 (\u0431\u0443\u0434\u0435\u0442 \u0441\u0447\u0438\u0442\u0430\u043d\u0430 1000 \u043a\u0430\u0434\u0440\u043e\u0432) spectrum = device.read()  # \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 spectrum.save('recorded_spectrum')"},{"location":"examples/record_spectrum/","title":"\u0427\u0442\u0435\u043d\u0438\u0435 \u0441\u043f\u0435\u043a\u0442\u0440\u0430 \u0438 \u0437\u0430\u043f\u0438\u0441\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0444\u0430\u0439\u043b\u00b6","text":""},{"location":"examples/simple_notebook/","title":"Simple notebook","text":"In\u00a0[1]: Copied! <pre>%matplotlib widget\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom IPython.display import display\nimport ipywidgets as widgets\n\nfrom pyspectrum import Spectrometer, usb_spectrometer, FactoryConfig\n</pre> %matplotlib widget import numpy as np import matplotlib.pyplot as plt from IPython.display import display import ipywidgets as widgets  from pyspectrum import Spectrometer, usb_spectrometer, FactoryConfig In\u00a0[2]: Copied! <pre>device = Spectrometer(usb_spectrometer(reopen=True), FactoryConfig.default())\n</pre> device = Spectrometer(usb_spectrometer(reopen=True), FactoryConfig.default()) In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[3]: Copied! <pre>raw_fig = plt.figure()\nraw_ax = raw_fig.add_subplot()\ndef read_raw_data(_):\n    data = device.read_raw()\n    raw_ax.clear()\n    raw_ax.plot(np.mean(data.intensity, axis=0))\n\nread_raw = widgets.Button(description='Read raw')\nread_raw.on_click(read_raw_data)\ndisplay(read_raw)\n</pre> raw_fig = plt.figure() raw_ax = raw_fig.add_subplot() def read_raw_data(_):     data = device.read_raw()     raw_ax.clear()     raw_ax.plot(np.mean(data.intensity, axis=0))  read_raw = widgets.Button(description='Read raw') read_raw.on_click(read_raw_data) display(read_raw) <pre>Button(description='Read raw', style=ButtonStyle())</pre>                      Figure                  In\u00a0[6]: Copied! <pre>def init_config_ui():\n    profile_path_field = widgets.Text(value='data/profile.json')\n    exposure_field = widgets.IntSlider(value=100, min=1,max=1000, description='Exposure')\n    n_times_field = widgets.IntSlider(value=1, min=1, max=10, description='N times')\n    apply_button = widgets.Button(description='Apply')\n    read_dark_signal = widgets.Button(description='Read dark signal')\n    read_dark_signal.on_click(lambda _: device.read_dark_signal())\n    vbox = widgets.VBox([profile_path_field, exposure_field, n_times_field, apply_button])\n    hbox = widgets.HBox(children=[vbox, read_dark_signal])\n    display(hbox)\n    def apply(_):\n        device.set_config(\n            exposure=exposure_field.value,\n            wavelength_calibration_path=profile_path_field.value,\n            n_times=n_times_field.value,\n            )\n    apply_button.on_click(apply)\ninit_config_ui()\n</pre> def init_config_ui():     profile_path_field = widgets.Text(value='data/profile.json')     exposure_field = widgets.IntSlider(value=100, min=1,max=1000, description='Exposure')     n_times_field = widgets.IntSlider(value=1, min=1, max=10, description='N times')     apply_button = widgets.Button(description='Apply')     read_dark_signal = widgets.Button(description='Read dark signal')     read_dark_signal.on_click(lambda _: device.read_dark_signal())     vbox = widgets.VBox([profile_path_field, exposure_field, n_times_field, apply_button])     hbox = widgets.HBox(children=[vbox, read_dark_signal])     display(hbox)     def apply(_):         device.set_config(             exposure=exposure_field.value,             wavelength_calibration_path=profile_path_field.value,             n_times=n_times_field.value,             )     apply_button.on_click(apply) init_config_ui() <pre>HBox(children=(VBox(children=(Text(value='data/profile.json'), IntSlider(value=100, description='Exposure', ma\u2026</pre> <pre>Wavelength calibration loaded\n</pre> In\u00a0[5]: Copied! <pre>p_fig = plt.figure()\np_ax = p_fig.add_subplot()\ndef read_spectrum(_):\n    p_ax.clear()\n    if not device.is_configured:\n        p_ax.text(0, 0, 'Device is not configured')\n        return\n    data = device.read()\n    p_ax.plot(data.wavelength, np.mean(data.intensity, axis=0))\n\nread_p = widgets.Button(description='Read Spectrum')\nread_p.on_click(read_spectrum)\ndisplay(read_p)\n</pre> p_fig = plt.figure() p_ax = p_fig.add_subplot() def read_spectrum(_):     p_ax.clear()     if not device.is_configured:         p_ax.text(0, 0, 'Device is not configured')         return     data = device.read()     p_ax.plot(data.wavelength, np.mean(data.intensity, axis=0))  read_p = widgets.Button(description='Read Spectrum') read_p.on_click(read_spectrum) display(read_p) <pre>Button(description='Read Spectrum', style=ButtonStyle())</pre>                      Figure                  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"user-docs/installation/","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438","text":"<p>\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f</p> <ul> <li>Python 3.11 \u0438\u043b\u0438 \u0432\u044b\u0448\u0435</li> <li>\u0414\u0440\u0430\u0439\u0432\u0435\u0440 D2XX \u0434\u043b\u044f Windows</li> <li>\u0414\u0440\u0430\u0439\u0432\u0435\u0440 libftdi \u0434\u043b\u044f Linux (\u043d\u0430 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u0443\u0442\u0438\u0432\u043e\u0432 \u043f\u0440\u0435\u0434\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d)</li> </ul>"},{"location":"user-docs/installation/#linux","title":"\ud83d\udc27 Linux","text":"<p>\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043b\u043e\u0441\u044c \u043d\u0430 Ubuntu 22.04 LTS</p>"},{"location":"user-docs/installation/#1-python-pip","title":"1\ufe0f\u20e3 \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 Python \u0438 pip","text":"<pre><code>sudo apt install python3 python3-pip\n</code></pre>"},{"location":"user-docs/installation/#2","title":"2\ufe0f\u20e3 \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438","text":"<pre><code>pip install libspectrum\n</code></pre>"},{"location":"user-docs/installation/#3-usb","title":"3\ufe0f\u20e3 \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043f\u0440\u0430\u0432 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a USB","text":"<p>\u0412\u0430\u0436\u043d\u043e</p> <p>\u042d\u0442\u043e\u0442 \u0448\u0430\u0433 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e\u043c \u0431\u0435\u0437 \u043f\u0440\u0430\u0432 root</p> <pre><code>echo 'SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"0403\", ATTRS{idProduct}==\"6014\",  MODE=\"0666\"' | sudo tee /etc/udev/rules.d/69-spectrometer.rules\nsudo udevadm control --reload\n</code></pre>"},{"location":"user-docs/installation/#windows","title":"\ud83e\ude9f Windows","text":""},{"location":"user-docs/installation/#1-ftdi","title":"1\ufe0f\u20e3 \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u043e\u0432 FTDI","text":"<p>\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435</p> <p>\u0415\u0441\u043b\u0438 \u043d\u0430 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0435 \u0440\u0430\u043d\u0435\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u043b <code>Atom</code>, \u044d\u0442\u043e\u0442 \u0448\u0430\u0433 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u0442\u044c</p> <ul> <li>\u0421\u043a\u0430\u0447\u0430\u0439\u0442\u0435 \u0434\u0440\u0430\u0439\u0432\u0435\u0440 FTDI</li> <li>\u0414\u043e\u0441\u0442\u0443\u043f\u0435\u043d portable \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0449\u0438\u043a: CDM212364_Setup.zip</li> </ul> <p>Tip</p> <p>\u041e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0433\u0430\u0439\u0434 FTDI \u043f\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u043e\u0432</p>"},{"location":"user-docs/installation/#2_1","title":"2\ufe0f\u20e3 \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439","text":"<ul> <li>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0420\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u044f\u0435\u043c\u044b\u0439 \u043f\u0430\u043a\u0435\u0442 Visual C++ \u0434\u043b\u044f Visual Studio 2015</li> <li>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 64-\u0431\u0438\u0442\u043d\u044b\u0439 Python (3.11+)</li> </ul>"},{"location":"user-docs/installation/#3","title":"3\ufe0f\u20e3 \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438","text":"<pre><code>pip install libspectrum\n</code></pre>"},{"location":"user-docs/installation/#_2","title":"\ud83d\udd0d \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438","text":"<p>\u0414\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u0432 Python:</p> <pre><code>from pyspectrum import Spectrometer\n\n# \u0414\u043e\u043b\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c\u0441\u044f \u0431\u0435\u0437 \u043e\u0448\u0438\u0431\u043e\u043a\nspectrometer = Spectrometer()\n</code></pre> <p>\u0413\u043e\u0442\u043e\u0432\u043e!</p> <p>\u041f\u043e\u0441\u043b\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0448\u0430\u0433\u043e\u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0433\u043e\u0442\u043e\u0432\u0430 \u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044e</p>"},{"location":"user-docs/installation/#_3","title":"\ud83d\udea8 \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b","text":"\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u041e\u0448\u0438\u0431\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a USB (Linux) \u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 udev \u0438 \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 ImportError (Windows) \u0423\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0434\u0440\u0430\u0439\u0432\u0435\u0440 FTDI ModuleNotFoundError \u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u0432\u0435\u0440\u0441\u0438\u044e Python \u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 <p>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430</p> <p>\u041f\u0440\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u043e\u0432\u0435\u043d\u0438\u0438 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 issue \u043d\u0430 GitHub.</p>"},{"location":"user-docs/overview/","title":"\u041e\u0431\u0437\u043e\u0440 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Libspectrum","text":"<p>\u041e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435</p> <p>Libspectrum - \u044d\u0442\u043e Python \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u043f\u0435\u043a\u0442\u0440\u043e\u043c\u0435\u0442\u0440\u043e\u043c \u0447\u0435\u0440\u0435\u0437 USB \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441. \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0441\u043f\u0435\u043a\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.</p>"},{"location":"user-docs/overview/#api","title":"\ud83d\udcda API","text":"<p>\u041f\u043e\u043b\u043d\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 API \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 API.</p>"},{"location":"user-docs/overview/#_1","title":"\ud83d\udcbb \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c","text":"<p>\u0421\u0442\u0430\u0442\u0443\u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438</p> \u041e\u0421 \u0421\u0442\u0430\u0442\u0443\u0441 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f USB-\u0441\u043b\u043e\u044f Windows \u2705 \u041f\u043e\u043b\u043d\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 Python (ftd2xx) Linux (Ubuntu) \u2705 \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 C++ (libftdi) macOS \u274c \u041d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f - <p>\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u044f</p> <p>\u0414\u043b\u044f \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0435\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0438 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Windows</p> <p>\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f Linux</p> <p>\u041f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u043d\u0430 Linux \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u043d\u0438\u0438 \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u0430\u0434\u0440\u043e\u0432:</p> <ul> <li>\u26a0\ufe0f \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u044b \u043f\u0440\u0438 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043e\u0431\u044a\u0435\u043c\u0430\u0445 \u0434\u0430\u043d\u043d\u044b\u0445</li> <li>\ud83d\udce6 \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0431\u0430\u0442\u0447-\u043f\u0430\u043a\u0435\u0442\u0430\u043c\u0438</li> <li>\ud83d\udd04 \u0418\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u0440\u0435\u0436\u0438\u043c \u0447\u0442\u0435\u043d\u0438\u044f</li> </ul> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435: \u041f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f</p>"},{"location":"user-docs/overview/#_2","title":"\ud83d\ude80 \u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442","text":"<pre><code>from pyspectrum import Spectrometer\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u0441\u043f\u0435\u043a\u0442\u0440\u043e\u043c\u0435\u0442\u0440\u0430\nspectrometer = Spectrometer()\n\n# \u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\nspectrometer.set_config(\n    exposure=100,  # \u0432\u0440\u0435\u043c\u044f \u044d\u043a\u0441\u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u0432 \u043c\u0441\n    n_times=10,    # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043d\u0438\u043c\u0430\u0435\u043c\u044b\u0445 \u043a\u0430\u0434\u0440\u043e\u0432\n    wavelength_calibration_path=\"calibration.json\",  \n    dark_signal_path=\"dark.pkl\"  \n)\n\n# \u0418\u0437\u043c\u0435\u0440\u044f\u0435\u043c \u0442\u0435\u043c\u043d\u043e\u0432\u043e\u0439 \u0441\u0438\u0433\u043d\u0430\u043b (\u0441 \u0437\u0430\u043a\u0440\u044b\u0442\u044b\u043c \u043e\u0442\u0432\u0435\u0440\u0441\u0442\u0438\u0435\u043c)\nspectrometer.read_dark_signal()\n\n# \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u043f\u0435\u043a\u0442\u0440\nspectrum = spectrometer.read()\n\n# \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438\nprint(f\"\u0420\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445: {spectrum.shape}\")\nprint(f\"\u0414\u043b\u0438\u043d\u044b \u0432\u043e\u043b\u043d: {spectrum.wavelength}\")\nprint(f\"\u0418\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u043e\u0441\u0442\u0438: {spectrum.intensity}\")\n\n# \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b\nspectrum.save(\"measurement.pkl\")\n</code></pre>"},{"location":"user-docs/overview/#_3","title":"\ud83d\udcca \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438","text":""},{"location":"user-docs/overview/#data","title":"Data","text":"<ul> <li>\ud83d\udce5 \u0421\u044b\u0440\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430</li> <li>\ud83d\udd22 \u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438</li> </ul>"},{"location":"user-docs/overview/#spectrum","title":"Spectrum","text":"<ul> <li>\ud83d\udcc8 \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435</li> <li>\ud83d\udccf \u041f\u0440\u0438\u0432\u044f\u0437\u043a\u0430 \u043a \u0434\u043b\u0438\u043d\u0430\u043c \u0432\u043e\u043b\u043d</li> </ul>"},{"location":"user-docs/overview/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439","text":"<pre><code># \u0412\u044b\u0447\u0438\u0442\u0430\u043d\u0438\u0435 \u0441\u043f\u0435\u043a\u0442\u0440\u043e\u0432\nresult = spectrum1 - spectrum2\n\n# \u0423\u0441\u0440\u0435\u0434\u043d\u0435\u043d\u0438\u0435 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438\naverage = spectrum[:5] * 0.2  \n</code></pre>"},{"location":"user-docs/overview/#_5","title":"\u2699\ufe0f \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f","text":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0422\u0438\u043f <code>exposure</code> \u0412\u0440\u0435\u043c\u044f \u044d\u043a\u0441\u043f\u043e\u0437\u0438\u0446\u0438\u0438 (\u043c\u0441) int <code>n_times</code> \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439 int <code>dark_signal_path</code> \u041f\u0443\u0442\u044c \u043a \u0442\u0435\u043c\u043d\u043e\u0432\u043e\u043c\u0443 \u0441\u0438\u0433\u043d\u0430\u043b\u0443 str <code>wavelength_calibration_path</code> \u041f\u0443\u0442\u044c \u043a \u043a\u0430\u043b\u0438\u0431\u0440\u043e\u0432\u043a\u0435 \u0434\u043b\u0438\u043d \u0432\u043e\u043b\u043d str"},{"location":"user-docs/overview/#_6","title":"\ud83d\udd27 \u041d\u0438\u0437\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f","text":"<p>UsbDevice</p> <p>\u041f\u0440\u0438 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u043f\u0440\u044f\u043c\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 UsbDevice \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f.</p> <p>\u0414\u043b\u044f \u043d\u0438\u0437\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u043e\u0433\u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441\u043c. \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e UsbDevice</p>"},{"location":"user-docs/usb-device/","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430 UsbDevice","text":""},{"location":"user-docs/usb-device/#pyspectrum.UsbDevice","title":"<code>pyspectrum.UsbDevice</code>","text":"<p>\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 USB \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e\u043c.</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f: <pre><code>device = UsbDevice(vendor=0x0403, product=0x6014)\ndevice.set_timer(1)\nframe = device.read_frame(10)\ndevice.close()\n</code></pre></p>"},{"location":"user-docs/usb-device/#pyspectrum.UsbDevice.__init__","title":"<code>__init__(vendor, product, read_timeout=10000)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>vendor</code> <code>int</code> <p>Vendor ID USB \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430</p> required <code>product</code> <code>int</code> <p>Product ID USB \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430</p> required <code>read_timeout</code> <code>int</code> <p>Timeout \u0434\u043b\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0447\u0442\u0435\u043d\u0438\u044f (\u0432 \u043c\u0438\u043b\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445)</p> <code>10000</code>"},{"location":"user-docs/usb-device/#pyspectrum.UsbDevice.close","title":"<code>close()</code>","text":"<p>\u0417\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 USB \u0421\u043f\u0435\u043a\u0442\u0440\u043e\u043c\u0435\u0442\u0440\u043e\u043c.</p>"},{"location":"user-docs/usb-device/#pyspectrum.UsbDevice.is_opened","title":"<code>is_opened: bool</code>  <code>property</code>","text":"<p>\u041e\u0442\u043a\u0440\u044b\u0442\u043e \u043b\u0438 USB \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True \u0435\u0441\u043b\u0438 USB Device \u043e\u0442\u043a\u0440\u044b\u0442 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b</p>"},{"location":"user-docs/usb-device/#pyspectrum.UsbDevice.get_pixel_count","title":"<code>get_pixel_count()</code>","text":"<p>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043b-\u0432\u043e \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439 \u0432 \u043b\u0438\u043d\u0438\u0438.</p> <p>Returns:</p> Type Description <code>int</code> <p>\u041a\u043e\u043b-\u0432\u043e \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439</p>"},{"location":"user-docs/usb-device/#pyspectrum.UsbDevice.set_timer","title":"<code>set_timer(millis)</code>","text":"<p>\u0412\u044b\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0433\u043e \u043a\u0430\u0434\u0440\u0430 (\u043d\u0430\u043a\u043e\u043f\u043b\u0435\u043d\u0438\u044f) - \u0432\u0440\u0435\u043c\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0439 \u044d\u043a\u0441\u043f\u043e\u0437\u0438\u0446\u0438\u0438 <code>\u03c4</code>.</p> <p>\u0411\u0430\u0437\u043e\u0432\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u044d\u043a\u0441\u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0437 \u043c\u0430\u043d\u0442\u0438\u0441\u0441\u044b \u0438 \u044d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0442\u0430\u0439\u043c\u0435\u0440\u0430 \u043a\u0430\u043a:</p> <p><code>\u03c4 = 0.1 ms * mant * 10 ^ exp</code></p> <p>\u0420\u0430\u0437\u043c\u0435\u0440\u044b \u043c\u0430\u043d\u0442\u0438\u0441\u0441\u044b \u0438 \u044d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0442\u044b:</p> <ul> <li> <p>\u041c\u0430\u043d\u0442\u0438\u0441\u0430 \u0442\u0430\u0439\u043c\u0435\u0440\u0430 - <code>10 \u0431\u0438\u0442</code></p> </li> <li> <p>\u042d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0442\u0430 \u0442\u0430\u0439\u043c\u0435\u0440\u0430 - <code>2 \u0431\u0438\u0442\u0430</code></p> </li> </ul> <p>\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0430\u043a\u0435\u0442\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b: <pre><code>DATA[0] = \u043c\u0430\u043d\u0442\u0438\u0441\u0441\u0430, \u043c\u043b\u0430\u0434\u0448\u0438\u0439 \u0431\u0430\u0439\u0442\nDATA[1] = \u043c\u0430\u043d\u0442\u0438\u0441\u0441\u0430, \u0441\u0442\u0430\u0440\u0448\u0438\u0439 \u0431\u0430\u0439\u0442\nDATA[2] = \u044d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0442\u0430\nDATA[3] = 0\n</code></pre></p> <p>\u041f\u043e\u043b\u0435 <code>ANS_DATA</code> \u0432 \u043e\u0442\u0432\u0435\u0442\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 0.</p> <p>Parameters:</p> Name Type Description Default <code>millis</code> <code>int</code> <p>\u0432\u0440\u0435\u043c\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0439 \u044d\u043a\u0441\u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u0432 \u043c\u0441</p> required"},{"location":"user-docs/usb-device/#pyspectrum.UsbDevice.read_frame","title":"<code>read_frame(n_times)</code>","text":"<p>\u0427\u0438\u0442\u0430\u0435\u0442 \u043a\u0430\u0434\u0440 \u0441\u043f\u0435\u043a\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 USB \u0441\u043f\u0435\u043a\u0442\u0440\u043e\u043c\u0435\u0442\u0440\u0430.</p> <p>\u041e\u0434\u0438\u043d \u043a\u0430\u0434\u0440 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 <code>n_times</code> \u043d\u0430\u043a\u043e\u043f\u043b\u0435\u043d\u0438\u0439/\u043b\u0438\u043d\u0438\u0439.</p> <p>\u041a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430\u043a\u043e\u043f\u043b\u0435\u043d\u0438\u0435/\u043b\u0438\u043d\u0438\u044f \u0432 \u0441\u0432\u043e\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 <code>pixelNumber</code> \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439 \u0432 \u0433\u0438\u0431\u0440\u0438\u0434\u043d\u043e\u0439 \u0441\u0431\u043e\u0440\u043a\u0435 \u0444\u043e\u0442\u043e\u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440\u043e\u0432.</p> <ul> <li> <p><code>pixelNumber</code> - \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 <code>CMD_CODE_WRITE_PIXEL_NUMBER</code></p> </li> <li> <p>\u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u0438\u043a\u0441\u0435\u043b\u044c - <code>2 \u0431\u0430\u0439\u0442\u0430</code></p> </li> <li> <p>\u041a\u0430\u0436\u0434\u044b\u0439 \u043a\u0430\u0434\u0440 = <code>pixelNumber * n_times * 2 \u0431\u0430\u0439\u0442</code></p> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>n_times</code> <code>int</code> <p>\u043a\u043e\u043b-\u0432\u043e \u043d\u0430\u043a\u043e\u043f\u043b\u0435\u043d\u0438\u0439/\u043b\u0438\u043d\u0438\u0439 (4 \u0431\u0430\u0439\u0442\u0430 <code>DATA</code> \u043f\u043e\u043b\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u044b)</p> required <p>Returns:</p> Type Description <code>Frame</code> <p>\u041e\u0431\u044a\u0435\u043a\u0442 \u043a\u0430\u0434\u0440\u0430</p>"}]}