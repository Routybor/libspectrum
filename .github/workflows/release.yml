name: Release

on:
  push:
    branches:
      - master
      - usb-handling-in-python
  workflow_dispatch:

jobs:
  build-windows:
    strategy:
      fail-fast: false
      matrix:
        include:
          - python-version: '3.11'
          - python-version: '3.12'
          - python-version: '3.13'

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{matrix.python-version}}

    - name: Install build tools
      run: python -m pip install --upgrade pip hatch

    - name: Build wheel
      run: hatch build -t wheel

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libspectrum-windows-${{ matrix.python-version }}
        path: dist/*.whl

  build-linux:
    strategy:
      fail-fast: false
      matrix:
        include:
          - python-version: '3.11'
          - python-version: '3.12'
          - python-version: '3.13'

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{matrix.python-version}}

    - name: Install build tools
      run: python -m pip install --upgrade pip pybind11 hatch

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libftdipp1-dev cmake

    - name: Build wheel
      run: hatch build -t wheel

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libspectrum-linux-${{ matrix.python-version }}
        path: dist/*

  test:
    needs: [build-linux, build-windows]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python-version: '3.11'
          - os: ubuntu-latest
            python-version: '3.12'
          - os: ubuntu-latest
            python-version: '3.13'
          - os: windows-latest
            python-version: '3.11'
          - os: windows-latest
            python-version: '3.12'
          - os: windows-latest
            python-version: '3.13'

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            dist
            tests
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/download-artifact@v4
        with:
          name: libspectrum-windows-${{ matrix.python-version }}
          path: artifacts/

      - name: Download artifact (Unix)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/download-artifact@v4
        with:
          name: libspectrum-linux-${{ matrix.python-version }}
          path: artifacts/
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest

      - name: Install artifact (Windows)
        if: matrix.os == 'windows-latest'
        run: Get-ChildItem -Path artifacts -Filter *.whl | ForEach-Object { pip install $_.FullName }
        shell: pwsh

      - name: Download D2XX (Windows)
        if: matrix.os == 'windows-latest'
        run: curl -o ftdi.zip -L https://ftdichip.com/wp-content/uploads/2023/09/CDM-v2.12.36.4-WHQL-Certified.zip
        shell: pwsh

      - name: Extract D2XX (Windows)
        if: matrix.os == 'windows-latest'
        run: Expand-Archive -Path ftdi.zip -DestinationPath ftdi
        shell: pwsh

      - name: Install D2XX to PATH (Windows)
        if: matrix.os == 'windows-latest'
        run: |
            Copy-Item -Path ftdi/amd64/ftd2xx64.dll -Destination $Env:SystemRoot\System32
            Copy-Item -Path ftdi/i386/ftd2xx.dll -Destination $Env:SystemRoot\SysWOW64
        shell: pwsh

      - name: Install artifact (Unix)
        if: matrix.os != 'windows-latest'
        run: pip install artifacts/*.whl
        shell: bash

      - name: Run tests
        run: cd tests/ && pytest

  upload-docs:
    if: ${{github.ref == 'refs/heads/master'}}
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install documentation tools
        run: pip install mkdocs mkdocs-material mkdocstrings mkdocstrings-python mkdocs-jupyter

      - name: Build documentation
        run: mkdocs build

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4.6.8
        with:
          folder: docs_generated

  release:
    if: ${{ github.ref == 'refs/tags/latest' }}
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create Release
        uses: marvinpinto/action-automatic-releases@v1.2.1
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: 'latest'
          title: 'Latest Build'
          files: dist/**/*.whl

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: dist/