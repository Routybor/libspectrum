name: Release

on:
  push:
    branches:
      - master
      - logging
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-windows:
    strategy:
      fail-fast: false
      matrix:
        include:
          - python-version: '3.11'
          - python-version: '3.12'
          - python-version: '3.13'

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{matrix.python-version}}

    - name: Install build tools
      run: python -m pip install --upgrade pip hatch

    - name: Build wheel
      run: hatch build -t wheel

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libspectrum-windows-${{ matrix.python-version }}
        path: dist/*.whl

  build-linux:
    strategy:
      fail-fast: false
      matrix:
        include:
          - python-version: '3.11'
          - python-version: '3.12'
          - python-version: '3.13'

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{matrix.python-version}}

    - name: Install build tools
      run: python -m pip install --upgrade pip pybind11 hatch

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libftdipp1-dev cmake

    - name: Build wheel
      run: hatch build -t wheel

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libspectrum-linux-${{ matrix.python-version }}
        path: dist/*.whl

  test:
    needs: [build-linux, build-windows]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python-version: '3.11'
          - os: ubuntu-latest
            python-version: '3.12'
          - os: ubuntu-latest
            python-version: '3.13'
          - os: windows-latest
            python-version: '3.11'
          - os: windows-latest
            python-version: '3.12'
          - os: windows-latest
            python-version: '3.13'

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            dist
            tests
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/download-artifact@v4
        with:
          name: libspectrum-windows-${{ matrix.python-version }}
          path: artifacts/

      - name: Download artifact (Unix)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/download-artifact@v4
        with:
          name: libspectrum-linux-${{ matrix.python-version }}
          path: artifacts/
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest

      - name: Install artifact (Windows)
        if: matrix.os == 'windows-latest'
        run: Get-ChildItem -Path artifacts -Filter *.whl | ForEach-Object { pip install $_.FullName }
        shell: pwsh

      - name: Download D2XX (Windows)
        if: matrix.os == 'windows-latest'
        run: curl -o ftdi.zip -L https://ftdichip.com/wp-content/uploads/2023/09/CDM-v2.12.36.4-WHQL-Certified.zip
        shell: pwsh

      - name: Extract D2XX (Windows)
        if: matrix.os == 'windows-latest'
        run: Expand-Archive -Path ftdi.zip -DestinationPath ftdi
        shell: pwsh

      - name: Install D2XX to PATH (Windows)
        if: matrix.os == 'windows-latest'
        run: |
            Copy-Item -Path ftdi/amd64/ftd2xx64.dll -Destination $Env:SystemRoot\System32
            Copy-Item -Path ftdi/i386/ftd2xx.dll -Destination $Env:SystemRoot\SysWOW64
        shell: pwsh

      - name: Install Libftdi (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libftdipp1-dev
        shell: bash

      - name: Install artifact (Unix)
        if: matrix.os != 'windows-latest'
        run: pip install artifacts/*.whl
        shell: bash

      - name: Run tests
        run: cd tests/ && pytest

  upload-docs:
    if: ${{github.ref == 'refs/heads/master'}}
    runs-on: macos-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install documentation tools
        run: pip install mkdocs mkdocs-material mkdocstrings mkdocstrings-python mkdocs-jupyter

      - name: Build documentation
        run: mkdocs build

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4.6.8
        with:
          folder: docs_generated

  publish-to-pypi:
    name: >-
      Publish Python 🐍 distribution 📦 to PyPI
    if: startsWith(github.ref, 'refs/tags/v')
    needs:
      - test
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/libspectrum
    permissions:
      id-token: write
        
    steps:
      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: libspectrum-windows-*
          path: temp/windows/
          
      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: libspectrum-linux-*
          path: temp/linux/

      - name: Create dist directory
        run: mkdir -p dist

      - name: Collect all wheels
        run: |
          find temp -name "*.whl" -exec cp {} dist/ \;
          echo "Contents of dist directory:"
          ls -la dist/

      - name: Validate wheels
        run: |
          pip install twine check-wheel-contents
          twine check dist/*.whl

      - name: Publish distribution 📦 to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          verbose: true

  github-release:
    name: >-
      Sign the Python 🐍 distribution 📦 with Sigstore
      and upload them to GitHub Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs:
      - test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: libspectrum-windows-*
          path: temp/windows/
          
      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: libspectrum-linux-*
          path: temp/linux/

      - name: Collect all wheels
        run: |
          mkdir -p dist
          find temp -name "*.whl" -exec cp {} dist/ \;
          echo "Contents of dist directory:"
          ls -la dist/

      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: >-
            ./dist/*.whl
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          make_latest: true